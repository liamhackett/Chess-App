{"ast":null,"code":"var _jsxFileName = \"/Users/liamhackett/Desktop/Chess-App/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport Tile from '../Tile/Tile';\nimport './Chessboard.css';\nimport { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst verticalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nconst horizontalAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n// const pieces: Piece[] = [];\n\nconst initialBoardState = [];\nfor (let p = 0; p < 2; p++) {\n  const type = p === 0 ? \"b\" : \"w\";\n  const y = p === 0 ? 7 : 0;\n  initialBoardState.push({\n    image: `assets/images/rook_${type}.png`,\n    x: 0,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/rook_${type}.png`,\n    x: 7,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/knight_${type}.png`,\n    x: 1,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/knight_${type}.png`,\n    x: 6,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/bishop_${type}.png`,\n    x: 2,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/bishop_${type}.png`,\n    x: 5,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/bishop_${type}.png`,\n    x: 2,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/bishop_${type}.png`,\n    x: 5,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/queen_${type}.png`,\n    x: 3,\n    y: y\n  });\n  initialBoardState.push({\n    image: `assets/images/king_${type}.png`,\n    x: 4,\n    y: y\n  });\n}\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pawn_b.png\",\n    x: i,\n    y: 6\n  });\n}\nfor (let i = 0; i < 8; i++) {\n  initialBoardState.push({\n    image: \"assets/images/pawn_w.png\",\n    x: i,\n    y: 1\n  });\n}\nexport default function Chessboard() {\n  _s();\n  const [gridX, setX] = useState(0);\n  const [gridY, setY] = useState(0);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  let activePiece = null;\n  function grabPiece(e) {\n    const element = e.target;\n    chess;\n    if (element.classList.contains(\"chess-piece\")) {\n      const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 75);\n      const gridY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 600) / 75));\n      const x = e.clientX - 40;\n      const y = e.clientY - 40;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      activePiece = element;\n    }\n  }\n  function movePiece(e) {\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 50;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 50;\n      const x = e.clientX - 40;\n      const y = e.clientY - 40;\n      activePiece.style.position = \"absolute\";\n\n      // if x is smaller than min\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      }\n      // if x is greater than max\n      else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      }\n      // if x within constraints\n      else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      // if y is smaller than min\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      }\n      // if y is greater than max\n      else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      }\n      // if y is within constraints\n      else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 75);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 600) / 75));\n      console.log(x, y);\n      setPieces(value => {\n        const pieces = value.map(p => {\n          if (p.x === 0 && p.y === 0) {\n            p.x = x;\n            p.y = x;\n          }\n          return p;\n        });\n        return pieces;\n      });\n      activePiece = null;\n    }\n  }\n  let board = [];\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      const number = j + i + 2;\n      let image = \"\";\n      pieces.forEach(p => {\n        if (p.x === i && p.y === j) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i},${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 28\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    onMouseUp: e => dropPiece(e),\n    id: \"chessboard\",\n    ref: chessboardRef,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 12\n  }, this);\n}\n_s(Chessboard, \"VX5vrCw7vBc5M3T1b7TzRMlSydg=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["React","Tile","useRef","useState","jsxDEV","_jsxDEV","verticalAxis","horizontalAxis","initialBoardState","p","type","y","push","image","x","i","Chessboard","_s","gridX","setX","gridY","setY","pieces","setPieces","chessboardRef","activePiece","grabPiece","e","element","target","chess","classList","contains","Math","floor","clientX","chessboard","offsetLeft","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","current","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","console","log","value","map","board","j","length","number","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","onMouseDown","onMouseUp","id","ref","children","_c","$RefreshReg$"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport Tile from '../Tile/Tile';\nimport './Chessboard.css';\nimport{ useRef, useState} from 'react';\n\nconst verticalAxis = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"];\nconst horizontalAxis = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n\ninterface Piece {\n    image: string;\n    x: number;\n    y: number;\n}\n\n// const pieces: Piece[] = [];\n\nconst initialBoardState: Piece[] = [];\n\nfor(let p = 0; p < 2; p++){\n    const type = (p === 0) ? \"b\" : \"w\";\n    const y = (p === 0) ? 7 : 0;\n    initialBoardState.push({image: `assets/images/rook_${type}.png`, x: 0, y: y});\n    initialBoardState.push({image: `assets/images/rook_${type}.png`, x: 7, y: y});\n    initialBoardState.push({image: `assets/images/knight_${type}.png`, x: 1, y: y});\n    initialBoardState.push({image: `assets/images/knight_${type}.png`, x: 6, y: y});\n    initialBoardState.push({image: `assets/images/bishop_${type}.png`, x: 2, y: y});\n    initialBoardState.push({image: `assets/images/bishop_${type}.png`, x: 5, y: y});\n    initialBoardState.push({image: `assets/images/bishop_${type}.png`, x: 2, y: y});\n    initialBoardState.push({image: `assets/images/bishop_${type}.png`, x: 5, y: y});\n    initialBoardState.push({image: `assets/images/queen_${type}.png`, x: 3, y: y});\n    initialBoardState.push({image: `assets/images/king_${type}.png`, x: 4, y: y});\n}\n\n\n\nfor(let i = 0; i < 8; i++){\n    initialBoardState.push({image: \"assets/images/pawn_b.png\", x: i, y: 6});\n}\n\nfor(let i = 0; i < 8; i++){\n    initialBoardState.push({image: \"assets/images/pawn_w.png\", x: i, y: 1});\n}\n\nexport default function Chessboard() {\n    const [gridX, setX] = useState(0);\n    const [gridY, setY] = useState(0);\n    const [pieces, setPieces] = useState<Piece[]>(initialBoardState);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n\n\n    let activePiece: HTMLElement | null = null;\n\n    \n    function grabPiece(e: React.MouseEvent<HTMLDivElement, MouseEvent>){\n        const element = e.target as HTMLElement;\n        chess\n        if(element.classList.contains(\"chess-piece\")){\n            const gridX = Math.floor((e.clientX - chessboard.offsetLeft) / 75);\n            const gridY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 600) / 75));\n            \n            const x = e.clientX - 40;\n            const y = e.clientY - 40;\n            element.style.position = \"absolute\";\n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n\n            activePiece = element;\n\n        }\n    }\n\n    function movePiece(e: React.MouseEvent){\n        const element = e.target as HTMLElement;\n        const chessboard = chessboardRef.current;\n        if(activePiece && chessboard){\n            const minX = chessboard.offsetLeft - 25;\n            const minY = chessboard.offsetTop -25;\n\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth - 50;\n            const maxY = chessboard.offsetTop + chessboard.clientHeight - 50;\n\n            const x = e.clientX - 40;\n            const y = e.clientY - 40;\n\n            activePiece.style.position = \"absolute\";\n            \n            // if x is smaller than min\n            if (x < minX) {\n                activePiece.style.left = `${minX}px`;\n            }\n            // if x is greater than max\n            else if(x > maxX) {\n                activePiece.style.left = `${maxX}px`;\n            }\n            // if x within constraints\n            else {\n                activePiece.style.left = `${x}px`;\n            }\n\n            // if y is smaller than min\n            if (y < minY) {\n                activePiece.style.top = `${minY}px`;\n            }\n            // if y is greater than max\n            else if(y > maxY) {\n                activePiece.style.top = `${maxY}px`;\n            }\n            // if y is within constraints\n            else {\n                activePiece.style.top = `${y}px`;\n            }\n            \n        }\n    }\n\n    function dropPiece(e: React.MouseEvent) {\n        const chessboard = chessboardRef.current;\n        if(activePiece && chessboard) {\n            const x = Math.floor((e.clientX - chessboard.offsetLeft) / 75);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 600) / 75));\n            console.log(x, y);\n            setPieces((value) => {\n                const pieces = value.map(p => {\n                    if(p.x === 0 && p.y ===0){\n                        p.x = x;\n                        p.y = x;\n                    }\n                    return p;\n                })\n                return pieces;\n            })\n            activePiece = null;\n        }\n    }\n\n    \n    let board = [];\n\n        for(let j = verticalAxis.length - 1; j >= 0; j--){\n            for(let i = 0; i < horizontalAxis.length; i++){\n                const number = j + i + 2;\n                let image = \"\";\n                pieces.forEach(p => {\n                    if(p.x === i && p.y === j){\n                        image = p.image;\n                    }\n                  });\n                board.push(<Tile key={`${i},${j}`} image={image} number= {number} />);\n               \n        }\n    }\n    return <div \n        onMouseMove={e => movePiece(e)} \n        onMouseDown={e => grabPiece(e)} \n        onMouseUp={e => dropPiece(e)}\n        id=\"chessboard\"\n        ref = {chessboardRef}\n    >\n        {board}\n    </div>\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}