{"ast":null,"code":"import { samePosition } from \"../../Constants\";\nimport { tileIsOccupied, tileIsEmptyOrOccupiedByOpponent, tileIsOccupiedByOpponent } from \"./GeneralRules\";\nexport const queenMove = (initialPosition, desiredPosition, type, team, boardState) => {\n  // if (desiredPosition.x === initialPosition.x || desiredPosition.y === initialPosition.y){\n  //     return this.queenMove(initialPosition, desiredPosition, type, team, boardState);\n  // }\n  // else{\n  //     return this.queenMove(initialPosition, desiredPosition, type, team, boardState);\n\n  // }\n  for (let i = 1; i < 8; i++) {\n    const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n    const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n    let passedPosition = {\n      x: initialPosition.x + i * multiplierX,\n      y: initialPosition.y + i * multiplierY\n    };\n    if (samePosition(passedPosition, desiredPosition)) {\n      return tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n    } else {\n      if (tileIsOccupied(passedPosition, boardState)) {\n        break;\n      }\n    }\n  }\n  return false;\n};\nexport const getPossibleQueenMoves = (queen, boardState) => {\n  const directions = [{\n    x: 1,\n    y: 0\n  },\n  // Right\n  {\n    x: -1,\n    y: 0\n  },\n  // Left\n  {\n    x: 0,\n    y: 1\n  },\n  // Up\n  {\n    x: 0,\n    y: -1\n  },\n  // Down\n  {\n    x: 1,\n    y: 1\n  },\n  // Up-Right\n  {\n    x: -1,\n    y: 1\n  },\n  // Up-Left\n  {\n    x: 1,\n    y: -1\n  },\n  // Down-Right\n  {\n    x: -1,\n    y: -1\n  } // Down-Left\n  ];\n\n  const possibleMoves = [];\n  for (const direction of directions) {\n    for (let i = 1; i < 8; i++) {\n      const destination = {\n        x: queen.position.x + direction.x * i,\n        y: queen.position.y + direction.y * i\n      };\n      if (!tileIsOccupied(destination, boardState)) {\n        possibleMoves.push(destination);\n      } else if (tileIsOccupiedByOpponent(destination, boardState, queen.team)) {\n        possibleMoves.push(destination);\n        break;\n      } else {\n        break;\n      }\n    }\n  }\n  return possibleMoves;\n};","map":{"version":3,"names":["samePosition","tileIsOccupied","tileIsEmptyOrOccupiedByOpponent","tileIsOccupiedByOpponent","queenMove","initialPosition","desiredPosition","type","team","boardState","i","multiplierX","x","multiplierY","y","passedPosition","getPossibleQueenMoves","queen","directions","possibleMoves","direction","destination","position","push"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/referee/rules/QueenRules.ts"],"sourcesContent":["import { samePosition, PieceType, TeamType , Piece, Position} from \"../../Constants\";\n\nimport { tileIsOccupied, tileIsEmptyOrOccupiedByOpponent, tileIsOccupiedByOpponent } from \"./GeneralRules\";\n\nexport const queenMove = (initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]): boolean => {\n    // if (desiredPosition.x === initialPosition.x || desiredPosition.y === initialPosition.y){\n    //     return this.queenMove(initialPosition, desiredPosition, type, team, boardState);\n    // }\n    // else{\n    //     return this.queenMove(initialPosition, desiredPosition, type, team, boardState);\n\n    // }\n    for(let i = 1; i < 8; i++){\n        const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n\n        const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n        \n        let passedPosition: Position = {x: initialPosition.x + (i * multiplierX), y: initialPosition.y + (i * multiplierY)};\n\n        if(samePosition(passedPosition, desiredPosition)){\n            return tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n        }\n        else{\n            if(tileIsOccupied(passedPosition, boardState)){\n                break;\n            }\n        }\n    }\n\n    return false;\n}\n\nexport const getPossibleQueenMoves = (queen: Piece, boardState: Piece[]): Position[] => {\n    const directions: Position[] = [\n        { x: 1, y: 0 },   // Right\n        { x: -1, y: 0 },  // Left\n        { x: 0, y: 1 },   // Up\n        { x: 0, y: -1 },  // Down\n        { x: 1, y: 1 },   // Up-Right\n        { x: -1, y: 1 },  // Up-Left\n        { x: 1, y: -1 },  // Down-Right\n        { x: -1, y: -1 }, // Down-Left\n    ];\n\n    const possibleMoves: Position[] = [];\n\n    for (const direction of directions) {\n        for (let i = 1; i < 8; i++) {\n            const destination: Position = {\n                x: queen.position.x + direction.x * i,\n                y: queen.position.y + direction.y * i\n            };\n\n            if (!tileIsOccupied(destination, boardState)) {\n                possibleMoves.push(destination);\n            } else if (tileIsOccupiedByOpponent(destination, boardState, queen.team)) {\n                possibleMoves.push(destination);\n                break;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return possibleMoves;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}