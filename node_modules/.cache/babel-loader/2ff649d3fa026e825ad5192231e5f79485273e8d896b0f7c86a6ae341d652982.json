{"ast":null,"code":"import { PieceType, TeamType } from \"../Constants\";\nimport { pawnMove, knightMove, bishopMove, rookMove, queenMove, kingMove, getPossiblePawnMoves, getPossibleKnightMoves, getPossibleBishopMoves, getPossibleRookMoves } from \"./rules\";\nexport default class Referee {\n  isEnPassantMove(initialPosition, desiredPosition, type, team, boardState) {\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n    // upper left or upper right || bottom left or bottom right\n    // if a piece is under or above the attacked tile\n\n    if (type == PieceType.PAWN) {\n      if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1) && desiredPosition.y - initialPosition.y === pawnDirection) {\n        const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n        if (piece) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // Valid Move Function\n  isValidMove(initialPosition, desiredPosition, type, team, boardState) {\n    switch (type) {\n      case PieceType.PAWN:\n        return pawnMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.KNIGHT:\n        return knightMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.BISHOP:\n        return bishopMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.ROOK:\n        return rookMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.QUEEN:\n        return queenMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.KING:\n        return kingMove(initialPosition, desiredPosition, type, team, boardState);\n    }\n  }\n  getValidMoves(piece, boardState) {\n    switch (piece.type) {\n      case PieceType.PAWN:\n        return getPossiblePawnMoves(piece, boardState);\n      case PieceType.KNIGHT:\n        return getPossibleKnightMoves(piece, boardState);\n      case PieceType.BISHOP:\n        return getPossibleBishopMoves(piece, boardState);\n      case PieceType.ROOK:\n        return getPossibleRookMoves(piece, boardState);\n      case PieceType.QUEEN:\n        return getPossibleQueenMoves(piece, bo);\n      case PieceType.KING:\n      default:\n        return [];\n    }\n  }\n}","map":{"version":3,"names":["PieceType","TeamType","pawnMove","knightMove","bishopMove","rookMove","queenMove","kingMove","getPossiblePawnMoves","getPossibleKnightMoves","getPossibleBishopMoves","getPossibleRookMoves","Referee","isEnPassantMove","initialPosition","desiredPosition","type","team","boardState","pawnDirection","OUR","PAWN","x","y","piece","find","p","position","enPassant","isValidMove","KNIGHT","BISHOP","ROOK","QUEEN","KING","getValidMoves","getPossibleQueenMoves","bo"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/referee/Referee.ts"],"sourcesContent":["import { PieceType, TeamType , Piece, Position} from \"../Constants\";\nimport { pawnMove, knightMove,  bishopMove, rookMove, queenMove, kingMove, getPossiblePawnMoves, getPossibleKnightMoves, getPossibleBishopMoves, getPossibleRookMoves} from \"./rules\";\n\nexport default class Referee {\n    \n    isEnPassantMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]){\n        const pawnDirection = (team === TeamType.OUR) ? 1: -1;\n       \n        // upper left or upper right || bottom left or bottom right\n        // if a piece is under or above the attacked tile\n\n        if (type == PieceType.PAWN){\n            if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1)&& desiredPosition.y - initialPosition.y === pawnDirection){\n                const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n                if(piece){\n                    return true;\n                }\n            }    \n        }\n       return false;\n    }\n    \n    // Valid Move Function\n    isValidMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n\n        switch(type) {\n            case PieceType.PAWN:\n                return pawnMove(initialPosition, desiredPosition, type, team, boardState);\n            \n                case PieceType.KNIGHT:\n                return knightMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.BISHOP:\n                return bishopMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.ROOK:\n                return rookMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.QUEEN:\n                return queenMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.KING:\n                return kingMove(initialPosition, desiredPosition, type, team, boardState);\n        }\n    }\n\n    getValidMoves(piece: Piece, boardState: Piece[]) : Position[] {\n         switch(piece.type){\n\n            case PieceType.PAWN:\n                return getPossiblePawnMoves(piece, boardState);\n            case PieceType.KNIGHT:\n                return getPossibleKnightMoves(piece, boardState);\n            case PieceType.BISHOP:\n                return getPossibleBishopMoves(piece, boardState);\n            case PieceType.ROOK:\n                return getPossibleRookMoves(piece, boardState);\n            case PieceType.QUEEN:\n                return getPossibleQueenMoves(piece, bo)\n            case PieceType.KING:\n            default: return [];\n\n\n         }\n \n    }\n\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}