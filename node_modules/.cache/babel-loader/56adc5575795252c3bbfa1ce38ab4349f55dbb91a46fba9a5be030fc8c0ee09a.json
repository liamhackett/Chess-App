{"ast":null,"code":"import { samePosition } from \"../../Constants\";\nimport { tileIsEmptyOrOccupiedByOpponent } from \"./GeneralRules\";\nexport const kingMove = (initialPosition, desiredPosition, type, team, boardState) => {\n  // Basic king movement\n  const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n  const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n  let passedPosition = {\n    x: initialPosition.x + 1 * multiplierX,\n    y: initialPosition.y + 1 * multiplierY\n  };\n  if (samePosition(passedPosition, desiredPosition)) {\n    return tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n  }\n  return false;\n};\nexport const getPossibleKingMoves = (king, boardState) => {};","map":{"version":3,"names":["samePosition","tileIsEmptyOrOccupiedByOpponent","kingMove","initialPosition","desiredPosition","type","team","boardState","multiplierX","x","multiplierY","y","passedPosition","getPossibleKingMoves","king"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/referee/rules/KingRules.ts"],"sourcesContent":["import { samePosition, PieceType, TeamType , Piece, Position} from \"../../Constants\";\n\nimport { tileIsEmptyOrOccupiedByOpponent } from \"./GeneralRules\";\n\nexport const kingMove = (initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]): boolean => {\n    // Basic king movement\n    const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n\n    const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n    \n    let passedPosition: Position = {x: initialPosition.x + (1 * multiplierX), y: initialPosition.y + (1 * multiplierY)};\n\n    if(samePosition(passedPosition, desiredPosition)){\n        return tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n    }\n\n    return false;\n}\n\nexport const getPossibleKingMoves = (king: Piece, boardState: Piece[]): Position[] => {\n    \n}\n"],"mappings":"AAAA,SAASA,YAAY,QAA8C,iBAAiB;AAEpF,SAASC,+BAA+B,QAAQ,gBAAgB;AAEhE,OAAO,MAAMC,QAAQ,GAAGA,CAACC,eAAyB,EAAEC,eAAyB,EAAEC,IAAe,EAAEC,IAAc,EAAEC,UAAmB,KAAc;EAC7I;EACA,MAAMC,WAAW,GAAGJ,eAAe,CAACK,CAAC,GAAGN,eAAe,CAACM,CAAC,GAAG,CAAC,CAAC,GAAGL,eAAe,CAACK,CAAC,GAAGN,eAAe,CAACM,CAAC,GAAG,CAAC,GAAG,CAAC;EAE9G,MAAMC,WAAW,GAAGN,eAAe,CAACO,CAAC,GAAGR,eAAe,CAACQ,CAAC,GAAG,CAAC,CAAC,GAAGP,eAAe,CAACO,CAAC,GAAGR,eAAe,CAACQ,CAAC,GAAG,CAAC,GAAG,CAAC;EAE9G,IAAIC,cAAwB,GAAG;IAACH,CAAC,EAAEN,eAAe,CAACM,CAAC,GAAI,CAAC,GAAGD,WAAY;IAAEG,CAAC,EAAER,eAAe,CAACQ,CAAC,GAAI,CAAC,GAAGD;EAAY,CAAC;EAEnH,IAAGV,YAAY,CAACY,cAAc,EAAER,eAAe,CAAC,EAAC;IAC7C,OAAOH,+BAA+B,CAACW,cAAc,EAAEL,UAAU,EAAED,IAAI,CAAC;EAC5E;EAEA,OAAO,KAAK;AAChB,CAAC;AAED,OAAO,MAAMO,oBAAoB,GAAGA,CAACC,IAAW,EAAEP,UAAmB,KAAiB,CAEtF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}