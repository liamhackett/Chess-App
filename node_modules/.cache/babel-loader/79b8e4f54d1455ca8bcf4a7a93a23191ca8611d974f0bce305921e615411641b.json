{"ast":null,"code":"import { samePosition } from \"../../Constants\";\nimport { tileIsOccupied, tileIsEmptyOrOccupiedByOpponent, tileIsOccupiedByOpponent } from \"./GeneralRules\";\n\n// Rook function\nexport const rookMove = (initialPosition, desiredPosition, type, team, boardState) => {\n  // ROOK MOVING AND ATTACK LOGIC\n  for (let i = 1; i < 8; i++) {\n    // Vertical Movement\n    let passedPosition;\n    if (initialPosition.x === desiredPosition.x) {\n      let multiplier = desiredPosition.y < initialPosition.y ? -1 : 1;\n      passedPosition = {\n        x: initialPosition.x,\n        y: initialPosition.y + i * multiplier\n      };\n    }\n    // Horizontal\n    else if (initialPosition.y === desiredPosition.y) {\n      let multiplier = desiredPosition.x < initialPosition.x ? -1 : 1;\n      passedPosition = {\n        x: initialPosition.x + i * multiplier,\n        y: initialPosition.y\n      };\n    }\n    if (passedPosition) {\n      if (samePosition(passedPosition, desiredPosition)) {\n        return tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n      } else if (tileIsOccupied(passedPosition, boardState)) {\n        break;\n      }\n    }\n  }\n  return false;\n};\nexport const getPossibleRookMoves = (rook, boardState) => {\n  const directions = [{\n    x: 0,\n    y: 1\n  },\n  // Up\n  {\n    x: 1,\n    y: 0\n  },\n  // Right\n  {\n    x: 0,\n    y: -1\n  },\n  // Down\n  {\n    x: -1,\n    y: 0\n  } // Left\n  ];\n\n  const possibleMoves = [];\n  for (const direction of directions) {\n    for (let i = 1; i < 8; i++) {\n      const destination = {\n        x: rook.position.x + direction.x * i,\n        y: rook.position.y + direction.y * i\n      };\n      if (!tileIsOccupied(destination, boardState)) {\n        possibleMoves.push(destination);\n      } else if (tileIsOccupiedByOpponent(destination, boardState, rook.team)) {\n        possibleMoves.push(destination);\n        break;\n      } else {\n        break;\n      }\n    }\n  }\n  return possibleMoves;\n};","map":{"version":3,"names":["samePosition","tileIsOccupied","tileIsEmptyOrOccupiedByOpponent","tileIsOccupiedByOpponent","rookMove","initialPosition","desiredPosition","type","team","boardState","i","passedPosition","x","multiplier","y","getPossibleRookMoves","rook","directions","possibleMoves","direction","destination","position","push"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/referee/rules/RookRules.ts"],"sourcesContent":["import { samePosition, PieceType, TeamType , Piece, Position} from \"../../Constants\";\n\nimport { tileIsOccupied, tileIsEmptyOrOccupiedByOpponent, tileIsOccupiedByOpponent } from \"./GeneralRules\";\n \n // Rook function\n export const rookMove = (initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) : boolean =>{\n    // ROOK MOVING AND ATTACK LOGIC\n    for (let i = 1; i < 8; i++){\n        // Vertical Movement\n        let passedPosition;\n        if(initialPosition.x === desiredPosition.x){\n            let multiplier = (desiredPosition.y < initialPosition.y) ? -1 : 1;\n            passedPosition = {x: initialPosition.x, y: initialPosition.y + (i * multiplier)};\n        }\n        // Horizontal\n        else if(initialPosition.y === desiredPosition.y){\n            let multiplier = (desiredPosition.x < initialPosition.x) ? -1 : 1;\n            passedPosition= {x: initialPosition.x + (i * multiplier), y: initialPosition.y};\n\n        }\n        if(passedPosition) {\n            if (samePosition(passedPosition, desiredPosition)) {\n                return tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n            }\n            else if (tileIsOccupied(passedPosition, boardState)){\n                break;\n            }\n        }\n    }\n    \n    return false;\n\n}\n\nexport const getPossibleRookMoves = (rook: Piece, boardState: Piece[]): Position[] => {\n    const directions: Position[] = [\n        { x: 0, y: 1 },   // Up\n        { x: 1, y: 0 },   // Right\n        { x: 0, y: -1 },  // Down\n        { x: -1, y: 0 },  // Left\n    ];\n\n    const possibleMoves: Position[] = [];\n\n    for (const direction of directions) {\n        for (let i = 1; i < 8; i++) {\n            const destination: Position = {\n                x: rook.position.x + direction.x * i,\n                y: rook.position.y + direction.y * i\n            };\n\n            if (!tileIsOccupied(destination, boardState)) {\n                possibleMoves.push(destination);\n            } else if (tileIsOccupiedByOpponent(destination, boardState, rook.team)) {\n                possibleMoves.push(destination);\n                break;\n            } else {\n                break;\n            }\n        }\n    }\n\n    return possibleMoves;\n};\n"],"mappings":"AAAA,SAASA,YAAY,QAA8C,iBAAiB;AAEpF,SAASC,cAAc,EAAEC,+BAA+B,EAAEC,wBAAwB,QAAQ,gBAAgB;;AAEzG;AACA,OAAO,MAAMC,QAAQ,GAAGA,CAACC,eAAyB,EAAEC,eAAyB,EAAEC,IAAe,EAAEC,IAAc,EAAEC,UAAmB,KAAc;EAC9I;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAC;IACvB;IACA,IAAIC,cAAc;IAClB,IAAGN,eAAe,CAACO,CAAC,KAAKN,eAAe,CAACM,CAAC,EAAC;MACvC,IAAIC,UAAU,GAAIP,eAAe,CAACQ,CAAC,GAAGT,eAAe,CAACS,CAAC,GAAI,CAAC,CAAC,GAAG,CAAC;MACjEH,cAAc,GAAG;QAACC,CAAC,EAAEP,eAAe,CAACO,CAAC;QAAEE,CAAC,EAAET,eAAe,CAACS,CAAC,GAAIJ,CAAC,GAAGG;MAAW,CAAC;IACpF;IACA;IAAA,KACK,IAAGR,eAAe,CAACS,CAAC,KAAKR,eAAe,CAACQ,CAAC,EAAC;MAC5C,IAAID,UAAU,GAAIP,eAAe,CAACM,CAAC,GAAGP,eAAe,CAACO,CAAC,GAAI,CAAC,CAAC,GAAG,CAAC;MACjED,cAAc,GAAE;QAACC,CAAC,EAAEP,eAAe,CAACO,CAAC,GAAIF,CAAC,GAAGG,UAAW;QAAEC,CAAC,EAAET,eAAe,CAACS;MAAC,CAAC;IAEnF;IACA,IAAGH,cAAc,EAAE;MACf,IAAIX,YAAY,CAACW,cAAc,EAAEL,eAAe,CAAC,EAAE;QAC/C,OAAOJ,+BAA+B,CAACS,cAAc,EAAEF,UAAU,EAAED,IAAI,CAAC;MAC5E,CAAC,MACI,IAAIP,cAAc,CAACU,cAAc,EAAEF,UAAU,CAAC,EAAC;QAChD;MACJ;IACJ;EACJ;EAEA,OAAO,KAAK;AAEhB,CAAC;AAED,OAAO,MAAMM,oBAAoB,GAAGA,CAACC,IAAW,EAAEP,UAAmB,KAAiB;EAClF,MAAMQ,UAAsB,GAAG,CAC3B;IAAEL,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EAAI;EAClB;IAAEF,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC;EAAI;EAClB;IAAEF,CAAC,EAAE,CAAC;IAAEE,CAAC,EAAE,CAAC;EAAE,CAAC;EAAG;EAClB;IAAEF,CAAC,EAAE,CAAC,CAAC;IAAEE,CAAC,EAAE;EAAE,CAAC,CAAG;EAAA,CACrB;;EAED,MAAMI,aAAyB,GAAG,EAAE;EAEpC,KAAK,MAAMC,SAAS,IAAIF,UAAU,EAAE;IAChC,KAAK,IAAIP,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACxB,MAAMU,WAAqB,GAAG;QAC1BR,CAAC,EAAEI,IAAI,CAACK,QAAQ,CAACT,CAAC,GAAGO,SAAS,CAACP,CAAC,GAAGF,CAAC;QACpCI,CAAC,EAAEE,IAAI,CAACK,QAAQ,CAACP,CAAC,GAAGK,SAAS,CAACL,CAAC,GAAGJ;MACvC,CAAC;MAED,IAAI,CAACT,cAAc,CAACmB,WAAW,EAAEX,UAAU,CAAC,EAAE;QAC1CS,aAAa,CAACI,IAAI,CAACF,WAAW,CAAC;MACnC,CAAC,MAAM,IAAIjB,wBAAwB,CAACiB,WAAW,EAAEX,UAAU,EAAEO,IAAI,CAACR,IAAI,CAAC,EAAE;QACrEU,aAAa,CAACI,IAAI,CAACF,WAAW,CAAC;QAC/B;MACJ,CAAC,MAAM;QACH;MACJ;IACJ;EACJ;EAEA,OAAOF,aAAa;AACxB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}