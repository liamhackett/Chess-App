{"ast":null,"code":"var _jsxFileName = \"/Users/liamhackett/Desktop/Chess-App/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from 'react';\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport Referee from \"../../referee/Referee\";\nimport { VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, BOARD_SIZE, BOARD_OFFSET, Position, TeamType, PieceType, initialBoardState, samePosition } from '../../Constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n// TODO: Add a way to have it console.log moves as they would be recorded in the chess format\n// Deal with checks and checkmates\n// King movement and castling\n// Clean up Queen movement and rook movement\n// Add log on side of chess board with moves in chess format e.g. 1. e4 e5\n// Add the rest of the user interface for the web\n// Highlight which square the last move came from \n// Add stockfish or other open source bot to play against\n// Finish videos\nexport default function Chessboard() {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [promotionPawn, setPromotionPawn] = useState();\n  const [grabPosition, setGrabPosition] = useState({\n    x: -1,\n    y: -1\n  });\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const modalRef = useRef(null);\n  const referee = new Referee();\n  function updateValidMoves() {\n    setPieces(currentPieces => {\n      return currentPieces.map(p => {\n        p.possibleMoves = referee.getValidMoves(p, currentPieces);\n        return p;\n      });\n    });\n  }\n  function grabPiece(e) {\n    updateValidMoves();\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      const grabX = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const grabY = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - BOARD_SIZE) / GRID_SIZE));\n      setGrabPosition({\n        x: grabX,\n        y: grabY\n      });\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n\n  // MOVE PIECE\n\n  function movePiece(e) {\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - BOARD_OFFSET / 2;\n      const minY = chessboard.offsetTop - BOARD_OFFSET / 2;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - BOARD_OFFSET;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - BOARD_OFFSET;\n      const x = e.clientX - GRID_SIZE / 2;\n      const y = e.clientY - GRID_SIZE / 2;\n      activePiece.style.position = \"absolute\";\n\n      // if x is smaller than min\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      }\n      // if x is greater than max\n      else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      }\n      // if x within constraints\n      else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      // if y is smaller than min\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      }\n      // if y is greater than max\n      else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      }\n      // if y is within constraints\n      else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n\n  // DROP PIECE\n\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard && grabPosition) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - BOARD_SIZE) / GRID_SIZE));\n      const currentPiece = pieces.find(p => p.position.x === grabPosition.x && p.position.y === grabPosition.y);\n      if (currentPiece) {\n        const validMove = referee.isValidMove(grabPosition, {\n          x: x,\n          y: y\n        }, currentPiece.type, currentPiece.team, pieces);\n        const isEnPassantMove = referee.isEnPassantMove(grabPosition, {\n          x: x,\n          y: y\n        }, currentPiece.type, currentPiece.team, pieces);\n        const pawnDirection = currentPiece.team === TeamType.OUR ? 1 : -1;\n        if (isEnPassantMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (samePosition(grabPosition, piece.position)) {\n              piece.enPassant = false;\n              piece.position.x = x;\n              piece.position.y = y;\n              results.push(piece);\n            } else if (!samePosition(piece.position, {\n              x: x,\n              y: y - pawnDirection\n            })) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n        } else if (validMove) {\n          // updates position and if a piece is attacked it gets removed\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (samePosition(grabPosition, piece.position)) {\n              // SPECIAL MOVE\n              piece.enPassant = Math.abs(grabPosition.y - y) === 2 && piece.type === PieceType.PAWN;\n              piece.position.x = x;\n              piece.position.y = y;\n              let promotionRow = piece.team === TeamType.OUR ? 7 : 0;\n              if (y === promotionRow && piece.type === PieceType.PAWN) {\n                var _modalRef$current;\n                (_modalRef$current = modalRef.current) === null || _modalRef$current === void 0 ? void 0 : _modalRef$current.classList.remove(\"hidden\");\n                setPromotionPawn(piece);\n                console.log(\"Promotion\");\n              }\n              results.push(piece);\n            } else if (!samePosition(piece.position, {\n              x: x,\n              y: y\n            })) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n        } else {\n          // resets piece position\n          activePiece.style.position = \"relative\";\n          activePiece.style.removeProperty(\"top\");\n          activePiece.style.removeProperty(\"left\");\n        }\n      }\n      setActivePiece(null);\n    }\n  }\n  function promotionTeamType() {\n    return (promotionPawn === null || promotionPawn === void 0 ? void 0 : promotionPawn.team) === TeamType.OUR ? \"w\" : \"b\";\n  }\n  function promotePawn(pieceType) {\n    var _modalRef$current2;\n    if (promotionPawn === undefined) {\n      return;\n    }\n    const updatedPieces = pieces.reduce((results, piece) => {\n      if (samePosition(piece.position, promotionPawn.position)) {\n        piece.type = pieceType;\n        const team = piece.team === TeamType.OUR ? \"w\" : \"b\";\n        let image = \"\";\n        switch (pieceType) {\n          case PieceType.QUEEN:\n            image = \"queen\";\n            break;\n          case PieceType.ROOK:\n            image = \"rook\";\n            break;\n          case PieceType.BISHOP:\n            image = \"bishop\";\n            break;\n          case PieceType.KNIGHT:\n            image = \"knight\";\n            break;\n        }\n        piece.image = `assets/images/${image}_${team}.png`;\n      }\n      results.push(piece);\n      return results;\n    }, []);\n    setPieces(updatedPieces);\n    (_modalRef$current2 = modalRef.current) === null || _modalRef$current2 === void 0 ? void 0 : _modalRef$current2.classList.add(\"hidden\");\n  }\n  let board = [];\n  for (let j = VERTICAL_AXIS.length - 1; j >= 0; j--) {\n    for (let i = 0; i < HORIZONTAL_AXIS.length; i++) {\n      const number = j + i + 2;\n      let image = \"\";\n      pieces.forEach(p => {\n        if (samePosition(p.position, {\n          x: i,\n          y: j\n        })) {\n          image = p.image;\n        }\n      });\n      let currentPiece = activePiece != null ? pieces.find(p => p.samePosition(grabPosition)) : undefined;\n      let highlight = currentPiece !== null && currentPiece !== void 0 && currentPiece.possibleMoves ? currentPiece.possibleMoves.some(p => p.samePosition(new Position(i, j))) : false;\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number,\n        highlight: highlight\n      }, `${i},${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 28\n      }, this));\n    }\n    const tile = board.find(t => t.key === \"1, 0\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"pawn-promotion-modal\",\n      className: \"hidden\",\n      ref: modalRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.QUEEN),\n          src: `/assets/images/queen_${promotionTeamType()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.ROOK),\n          src: `/assets/images/rook_${promotionTeamType()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.KNIGHT),\n          src: `/assets/images/knight_${promotionTeamType()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => promotePawn(PieceType.BISHOP),\n          src: `/assets/images/bishop_${promotionTeamType()}.png`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      onMouseMove: e => movePiece(e),\n      onMouseDown: e => grabPiece(e),\n      onMouseUp: e => dropPiece(e),\n      id: \"chessboard\",\n      ref: chessboardRef,\n      children: board\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(Chessboard, \"uoByVKWTIAdbqaDFVOZDS199c7A=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["useRef","useState","Tile","Referee","VERTICAL_AXIS","HORIZONTAL_AXIS","GRID_SIZE","BOARD_SIZE","BOARD_OFFSET","Position","TeamType","PieceType","initialBoardState","samePosition","jsxDEV","_jsxDEV","Fragment","_Fragment","Chessboard","_s","activePiece","setActivePiece","promotionPawn","setPromotionPawn","grabPosition","setGrabPosition","x","y","pieces","setPieces","chessboardRef","modalRef","referee","updateValidMoves","currentPieces","map","p","possibleMoves","getValidMoves","grabPiece","e","element","target","chessboard","current","classList","contains","grabX","Math","floor","clientX","offsetLeft","grabY","abs","ceil","clientY","offsetTop","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","find","validMove","isValidMove","type","team","isEnPassantMove","pawnDirection","OUR","updatedPieces","reduce","results","piece","enPassant","push","PAWN","promotionRow","_modalRef$current","remove","console","log","removeProperty","promotionTeamType","promotePawn","pieceType","_modalRef$current2","undefined","image","QUEEN","ROOK","BISHOP","KNIGHT","add","board","j","length","i","number","forEach","highlight","some","fileName","_jsxFileName","lineNumber","columnNumber","tile","t","key","children","id","className","ref","onClick","src","onMouseMove","onMouseDown","onMouseUp","_c","$RefreshReg$"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import{ useRef, useState} from 'react';\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport Referee from \"../../referee/Referee\";\nimport { VERTICAL_AXIS, HORIZONTAL_AXIS, GRID_SIZE, BOARD_SIZE, BOARD_OFFSET, Position, Piece, TeamType, PieceType, initialBoardState, samePosition } from '../../Constants';\nimport { type } from 'os';\n\n\n// TODO: Add a way to have it console.log moves as they would be recorded in the chess format\n// Deal with checks and checkmates\n// King movement and castling\n// Clean up Queen movement and rook movement\n// Add log on side of chess board with moves in chess format e.g. 1. e4 e5\n// Add the rest of the user interface for the web\n// Highlight which square the last move came from \n// Add stockfish or other open source bot to play against\n// Finish videos\n\n\nexport default function Chessboard() {\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null);\n    const [promotionPawn, setPromotionPawn] = useState<Piece>();\n    const [grabPosition, setGrabPosition] = useState<Position>({x : -1, y: -1});\n    const [pieces, setPieces] = useState<Piece[]>(initialBoardState);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const modalRef = useRef<HTMLDivElement>(null);\n\n    const referee = new Referee;\n\n    function updateValidMoves(){\n        setPieces((currentPieces) => {\n            return currentPieces.map(p => {\n                p.possibleMoves = referee.getValidMoves(p, currentPieces);\n                return p;\n            });\n        });\n    }\n\n    function grabPiece(e: React.MouseEvent<HTMLDivElement, MouseEvent>){\n        updateValidMoves();\n\n        const element = e.target as HTMLElement;\n        const chessboard = chessboardRef.current;\n        if(element.classList.contains(\"chess-piece\") && chessboard){\n            const grabX = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n            const grabY = (Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - BOARD_SIZE) / GRID_SIZE)));\n            setGrabPosition({\n                x: grabX, \n                y: grabY\n            });\n            \n    \n\n            const x = e.clientX - GRID_SIZE/2;\n            const y = e.clientY - GRID_SIZE/2;\n            element.style.position = \"absolute\";\n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n            \n            setActivePiece(element);\n            \n\n        }\n    }\n\n    // MOVE PIECE\n\n    function movePiece(e: React.MouseEvent){\n        const element = e.target as HTMLElement;\n        const chessboard = chessboardRef.current;\n        if(activePiece && chessboard){\n            const minX = chessboard.offsetLeft - BOARD_OFFSET / 2;\n            const minY = chessboard.offsetTop - BOARD_OFFSET / 2;\n\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth - BOARD_OFFSET;\n            const maxY = chessboard.offsetTop + chessboard.clientHeight - BOARD_OFFSET;\n\n            const x = e.clientX - GRID_SIZE / 2;\n            const y = e.clientY - GRID_SIZE / 2;\n\n            activePiece.style.position = \"absolute\";\n            \n            // if x is smaller than min\n            if (x < minX) {\n                activePiece.style.left = `${minX}px`;\n            }\n            // if x is greater than max\n            else if(x > maxX) {\n                activePiece.style.left = `${maxX}px`;\n            }\n            // if x within constraints\n            else {\n                activePiece.style.left = `${x}px`;\n            }\n\n            // if y is smaller than min\n            if (y < minY) {\n                activePiece.style.top = `${minY}px`;\n            }\n            // if y is greater than max\n            else if(y > maxY) {\n                activePiece.style.top = `${maxY}px`;\n            }\n            // if y is within constraints\n            else {\n                activePiece.style.top = `${y}px`;\n            }\n            \n        }\n    }\n\n    // DROP PIECE\n\n    function dropPiece(e: React.MouseEvent) {\n        const chessboard = chessboardRef.current;\n        if(activePiece && chessboard && grabPosition) {\n            const x = Math.floor((e.clientX - chessboard.offsetLeft) / GRID_SIZE);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - BOARD_SIZE) / GRID_SIZE));\n\n            const currentPiece = pieces.find(p => p.position.x === grabPosition.x && p.position.y === grabPosition.y);\n\n            if(currentPiece){\n                const validMove = referee.isValidMove(grabPosition, {x: x, y: y}, currentPiece.type, currentPiece.team, pieces);\n\n                const isEnPassantMove = referee.isEnPassantMove(grabPosition, {x: x, y: y}, currentPiece.type, currentPiece.team, pieces);\n\n                const pawnDirection = (currentPiece.team === TeamType.OUR) ? 1: -1;\n                \n                if(isEnPassantMove) {\n                    const updatedPieces = pieces.reduce((results, piece) => {\n                        if(samePosition(grabPosition, piece.position)) {\n                            piece.enPassant = false;\n                            piece.position.x = x;\n                            piece.position.y = y;\n                            results.push(piece);\n                        } \n                        else if(!samePosition(piece.position, {x: x, y: y-pawnDirection})){\n                            if(piece.type === PieceType.PAWN){\n                                piece.enPassant = false;\n                            }\n                            results.push(piece);\n                        }\n                        return results;\n\n                    }, [] as Piece[])\n\n                    setPieces(updatedPieces);\n                }\n                else if(validMove) {\n                    // updates position and if a piece is attacked it gets removed\n                    const updatedPieces = pieces.reduce((results, piece) => {\n                        if(samePosition(grabPosition, piece.position)){\n                            // SPECIAL MOVE\n                            piece.enPassant = \n                            Math.abs(grabPosition.y - y) === 2 && \n                            piece.type === PieceType.PAWN;\n\n                            piece.position.x = x;\n                            piece.position.y = y;\n\n                            let promotionRow = (piece.team === TeamType.OUR) ? 7 : 0;\n\n                            if (y === promotionRow && piece.type === PieceType.PAWN) {\n                                modalRef.current?.classList.remove(\"hidden\");\n                                setPromotionPawn(piece);\n                                console.log(\"Promotion\");\n\n                            }\n\n                            results.push(piece);\n                        }\n                        else if(!(samePosition(piece.position, {x: x, y: y}))){\n                            if(piece.type === PieceType.PAWN){\n                                piece.enPassant = false;\n                            }\n                            results.push(piece);\n                        }\n                        \n                        return results;\n                    }, [] as Piece[])\n                    \n                    setPieces(updatedPieces);\n\n               \n                }\n                else {\n                    // resets piece position\n                    activePiece.style.position = \"relative\";\n                    activePiece.style.removeProperty(\"top\");\n                    activePiece.style.removeProperty(\"left\");\n                }\n            }\n\n            setActivePiece(null);\n        }\n    }\n    function promotionTeamType(){\n        return (promotionPawn?.team === TeamType.OUR) ? \"w\" : \"b\";\n    }\n    function promotePawn(pieceType: PieceType){\n        if(promotionPawn === undefined){\n            return;\n        }\n\n        const updatedPieces = pieces.reduce((results, piece) => {\n            if(samePosition(piece.position, promotionPawn.position)) {\n                piece.type = pieceType;\n                const team = piece.team === TeamType.OUR ? \"w\" : \"b\";\n                let image = \"\"\n                switch(pieceType){\n                    case PieceType.QUEEN:\n                        image = \"queen\"\n                        break;\n                    case PieceType.ROOK:\n                        image = \"rook\"\n                        break;\n                    case PieceType.BISHOP:\n                        image = \"bishop\"\n                        break;\n                    case PieceType.KNIGHT:\n                        image = \"knight\"\n                        break;\n                }\n                piece.image = `assets/images/${image}_${team}.png`;\n            }\n            results.push(piece);\n            return results;\n        }, [] as Piece[]);\n        \n        setPieces(updatedPieces);\n\n        modalRef.current?.classList.add(\"hidden\");\n\n    }\n    \n    let board = [];\n\n        for(let j = VERTICAL_AXIS.length - 1; j >= 0; j--){\n            for(let i = 0; i < HORIZONTAL_AXIS.length; i++){\n                const number = j + i + 2;\n                let image = \"\";\n                pieces.forEach(p => {\n                    if(samePosition(p.position, {x: i, y: j})){\n                        image = p.image;\n                    }\n                  });\n                  let currentPiece = activePiece != null ? pieces.find(p => p.samePosition(grabPosition)) : undefined;\n                  let highlight = currentPiece?.possibleMoves ? \n                  currentPiece.possibleMoves.some(p => p.samePosition(new Position(i, j))) : false;\n            \n                board.push(<Tile key={`${i},${j}`} image={image} number= {number} highlight = {highlight} />);\n               \n        }\n        const tile = board.find(t => t.key === \"1, 0\");\n       \n\n    }\n    return (\n        <>\n        <div id=\"pawn-promotion-modal\" className=\"hidden\" ref={modalRef}>\n            <div className=\"modal-body\">\n                <img onClick={() => promotePawn(PieceType.QUEEN)} src = {`/assets/images/queen_${promotionTeamType()}.png`} />\n                <img onClick={() => promotePawn(PieceType.ROOK)} src = {`/assets/images/rook_${promotionTeamType()}.png`}/>\n                <img onClick={() => promotePawn(PieceType.KNIGHT)} src = {`/assets/images/knight_${promotionTeamType()}.png`} />\n                <img onClick={() => promotePawn(PieceType.BISHOP)} src = {`/assets/images/bishop_${promotionTeamType()}.png`} />\n            </div>\n        </div>\n            <div\n                onMouseMove={e => movePiece(e)} \n                onMouseDown={e => grabPiece(e)} \n                onMouseUp={e => dropPiece(e)}\n                id=\"chessboard\"\n                ref = {chessboardRef}\n            >\n                {board}\n            </div>\n        </>\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}