{"ast":null,"code":"import { TeamType } from \"../../Constants\";\nexport const pawnMove = (initialPosition, desiredPosition, type, team, boardState) => {\n  const specialRow = team === TeamType.OUR ? 1 : 6;\n  const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n  // Forward movement\n  if (initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 * pawnDirection) {\n    return !tileIsOccupied(desiredPosition, boardState) && !this.tileIsOccupied({\n      x: desiredPosition.x,\n      y: desiredPosition.y - pawnDirection\n    }, boardState);\n  }\n\n  // Normal forward movement\n  if (desiredPosition.x === initialPosition.x && desiredPosition.y - initialPosition.y === pawnDirection) {\n    return !this.tileIsOccupied(desiredPosition, boardState);\n  }\n\n  // Taking a piece diagonally\n  if (Math.abs(desiredPosition.x - initialPosition.x) === 1 && desiredPosition.y - initialPosition.y === pawnDirection) {\n    return this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n  }\n  return false;\n};","map":{"version":3,"names":["TeamType","pawnMove","initialPosition","desiredPosition","type","team","boardState","specialRow","OUR","pawnDirection","y","tileIsOccupied","x","Math","abs","tileIsOccupiedByOpponent"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/referee/rules/PawnRules.ts"],"sourcesContent":["import { samePosition, PieceType, TeamType , Piece, Position} from \"../../Constants\";\n\n\nexport const pawnMove = (initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]): boolean => {\n    const specialRow = team === TeamType.OUR ? 1 : 6;\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n    \n    // Forward movement\n    if (initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 * pawnDirection) {\n        return !tileIsOccupied(desiredPosition, boardState) && !this.tileIsOccupied({ x: desiredPosition.x, y: desiredPosition.y - pawnDirection }, boardState);\n    }\n    \n    // Normal forward movement\n    if (desiredPosition.x === initialPosition.x && (desiredPosition.y - initialPosition.y === pawnDirection)) {\n        return !this.tileIsOccupied(desiredPosition, boardState);\n    }\n    \n    // Taking a piece diagonally\n    if (Math.abs(desiredPosition.x - initialPosition.x) === 1 && desiredPosition.y - initialPosition.y === pawnDirection) {\n        return this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n    }\n\n    return false;\n}"],"mappings":"AAAA,SAAkCA,QAAQ,QAAyB,iBAAiB;AAGpF,OAAO,MAAMC,QAAQ,GAAGA,CAACC,eAAyB,EAAEC,eAAyB,EAAEC,IAAe,EAAEC,IAAc,EAAEC,UAAmB,KAAc;EAC7I,MAAMC,UAAU,GAAGF,IAAI,KAAKL,QAAQ,CAACQ,GAAG,GAAG,CAAC,GAAG,CAAC;EAChD,MAAMC,aAAa,GAAGJ,IAAI,KAAKL,QAAQ,CAACQ,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;;EAEpD;EACA,IAAIN,eAAe,CAACQ,CAAC,KAAKH,UAAU,IAAIJ,eAAe,CAACO,CAAC,GAAGR,eAAe,CAACQ,CAAC,KAAK,CAAC,GAAGD,aAAa,EAAE;IACjG,OAAO,CAACE,cAAc,CAACR,eAAe,EAAEG,UAAU,CAAC,IAAI,CAAC,IAAI,CAACK,cAAc,CAAC;MAAEC,CAAC,EAAET,eAAe,CAACS,CAAC;MAAEF,CAAC,EAAEP,eAAe,CAACO,CAAC,GAAGD;IAAc,CAAC,EAAEH,UAAU,CAAC;EAC3J;;EAEA;EACA,IAAIH,eAAe,CAACS,CAAC,KAAKV,eAAe,CAACU,CAAC,IAAKT,eAAe,CAACO,CAAC,GAAGR,eAAe,CAACQ,CAAC,KAAKD,aAAc,EAAE;IACtG,OAAO,CAAC,IAAI,CAACE,cAAc,CAACR,eAAe,EAAEG,UAAU,CAAC;EAC5D;;EAEA;EACA,IAAIO,IAAI,CAACC,GAAG,CAACX,eAAe,CAACS,CAAC,GAAGV,eAAe,CAACU,CAAC,CAAC,KAAK,CAAC,IAAIT,eAAe,CAACO,CAAC,GAAGR,eAAe,CAACQ,CAAC,KAAKD,aAAa,EAAE;IAClH,OAAO,IAAI,CAACM,wBAAwB,CAACZ,eAAe,EAAEG,UAAU,EAAED,IAAI,CAAC;EAC3E;EAEA,OAAO,KAAK;AAChB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}