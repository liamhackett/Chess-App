{"ast":null,"code":"var _jsxFileName = \"/Users/liamhackett/Desktop/Chess-App/src/components/Chessboard/Chessboard.tsx\",\n  _s = $RefreshSig$();\nimport { useRef, useState } from 'react';\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport Referee from \"../../referee/Referee\";\nimport { verticalAxis, horizontalAxis, TeamType, PieceType, initialBoardState } from '../../Constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Chessboard() {\n  _s();\n  const [activePiece, setActivePiece] = useState(null);\n  const [grabPosition, setGrabPosition] = useState(null);\n  const [pieces, setPieces] = useState(initialBoardState);\n  const chessboardRef = useRef(null);\n  const referee = new Referee();\n  function grabPiece(e) {\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (element.classList.contains(\"chess-piece\") && chessboard) {\n      setGrabPosition(Math.floor((e.clientX - chessboard.offsetLeft) / 75), Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 600) / 75)));\n      setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 600) / 75)));\n      const x = e.clientX - 40;\n      const y = e.clientY - 40;\n      element.style.position = \"absolute\";\n      element.style.left = `${x}px`;\n      element.style.top = `${y}px`;\n      setActivePiece(element);\n    }\n  }\n\n  // MOVE PIECE\n\n  function movePiece(e) {\n    const element = e.target;\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const minX = chessboard.offsetLeft - 25;\n      const minY = chessboard.offsetTop - 25;\n      const maxX = chessboard.offsetLeft + chessboard.clientWidth - 50;\n      const maxY = chessboard.offsetTop + chessboard.clientHeight - 50;\n      const x = e.clientX - 40;\n      const y = e.clientY - 40;\n      activePiece.style.position = \"absolute\";\n\n      // if x is smaller than min\n      if (x < minX) {\n        activePiece.style.left = `${minX}px`;\n      }\n      // if x is greater than max\n      else if (x > maxX) {\n        activePiece.style.left = `${maxX}px`;\n      }\n      // if x within constraints\n      else {\n        activePiece.style.left = `${x}px`;\n      }\n\n      // if y is smaller than min\n      if (y < minY) {\n        activePiece.style.top = `${minY}px`;\n      }\n      // if y is greater than max\n      else if (y > maxY) {\n        activePiece.style.top = `${maxY}px`;\n      }\n      // if y is within constraints\n      else {\n        activePiece.style.top = `${y}px`;\n      }\n    }\n  }\n\n  // DROP PIECE\n\n  function dropPiece(e) {\n    const chessboard = chessboardRef.current;\n    if (activePiece && chessboard) {\n      const x = Math.floor((e.clientX - chessboard.offsetLeft) / 75);\n      const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 600) / 75));\n      const currentPiece = pieces.find(p => p.position.x === gridX && p.position.y === gridY);\n      const attackedPiece = pieces.find(p => p.position.x === x && p.position.y === y);\n      if (currentPiece) {\n        const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces);\n        const isEnPassantMove = referee.isEnPassantMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces);\n        const pawnDirection = currentPiece.team === TeamType.OUR ? 1 : -1;\n        if (isEnPassantMove) {\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (piece.position.x === gridX && piece.position.y === gridY) {\n              piece.enPassant = false;\n              piece.position.x = x;\n              piece.position.y = y;\n              results.push(piece);\n            } else if (!(piece.position.x === x && piece.position.y === y - pawnDirection)) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n        } else if (validMove) {\n          // updates position and if a piece is attacked it gets removed\n          const updatedPieces = pieces.reduce((results, piece) => {\n            if (piece.position.x === gridX && piece.position.y === gridY) {\n              if (Math.abs(gridY - y) === 2 && piece.type === PieceType.PAWN) {\n                //Special move\n                piece.enPassant = true;\n              } else {\n                piece.enPassant = false;\n              }\n              piece.position.x = x;\n              piece.position.y = y;\n              results.push(piece);\n            } else if (!(piece.position.x === x && piece.position.y === y)) {\n              if (piece.type === PieceType.PAWN) {\n                piece.enPassant = false;\n              }\n              results.push(piece);\n            }\n            return results;\n          }, []);\n          setPieces(updatedPieces);\n        } else {\n          // resets piece position\n          activePiece.style.position = \"relative\";\n          activePiece.style.removeProperty(\"top\");\n          activePiece.style.removeProperty(\"left\");\n        }\n      }\n      setActivePiece(null);\n    }\n  }\n  let board = [];\n  for (let j = verticalAxis.length - 1; j >= 0; j--) {\n    for (let i = 0; i < horizontalAxis.length; i++) {\n      const number = j + i + 2;\n      let image = \"\";\n      pieces.forEach(p => {\n        if (p.position.x === i && p.position.y === j) {\n          image = p.image;\n        }\n      });\n      board.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: image,\n        number: number\n      }, `${i},${j}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 28\n      }, this));\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onMouseMove: e => movePiece(e),\n    onMouseDown: e => grabPiece(e),\n    onMouseUp: e => dropPiece(e),\n    id: \"chessboard\",\n    ref: chessboardRef,\n    children: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 12\n  }, this);\n}\n_s(Chessboard, \"BYf6f681qYaSw2zd8eB5/Jz8AJs=\");\n_c = Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["useRef","useState","Tile","Referee","verticalAxis","horizontalAxis","TeamType","PieceType","initialBoardState","jsxDEV","_jsxDEV","Chessboard","_s","activePiece","setActivePiece","grabPosition","setGrabPosition","pieces","setPieces","chessboardRef","referee","grabPiece","e","element","target","chessboard","current","classList","contains","Math","floor","clientX","offsetLeft","abs","ceil","clientY","offsetTop","setGridY","x","y","style","position","left","top","movePiece","minX","minY","maxX","clientWidth","maxY","clientHeight","dropPiece","currentPiece","find","p","gridX","gridY","attackedPiece","validMove","isValidMove","type","team","isEnPassantMove","pawnDirection","OUR","updatedPieces","reduce","results","piece","enPassant","push","PAWN","removeProperty","board","j","length","i","number","image","forEach","fileName","_jsxFileName","lineNumber","columnNumber","onMouseMove","onMouseDown","onMouseUp","id","ref","children","_c","$RefreshReg$"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/components/Chessboard/Chessboard.tsx"],"sourcesContent":["import{ useRef, useState} from 'react';\nimport './Chessboard.css';\nimport Tile from '../Tile/Tile';\nimport Referee from \"../../referee/Referee\";\nimport { verticalAxis, horizontalAxis, Position, Piece, TeamType, PieceType, initialBoardState } from '../../Constants';\n\n\n\n\n\n\nexport default function Chessboard() {\n    const [activePiece, setActivePiece] = useState<HTMLElement | null>(null);\n    const [grabPosition, setGrabPosition] = useState<Position | null>(null);\n    const [pieces, setPieces] = useState<Piece[]>(initialBoardState);\n    const chessboardRef = useRef<HTMLDivElement>(null);\n    const referee = new Referee;\n\n\n\n    function grabPiece(e: React.MouseEvent<HTMLDivElement, MouseEvent>){\n        const element = e.target as HTMLElement;\n        const chessboard = chessboardRef.current;\n        if(element.classList.contains(\"chess-piece\") && chessboard){\n            setGrabPosition(Math.floor((e.clientX - chessboard.offsetLeft) / 75), (Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 600) / 75))));\n            setGridY(Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 600) / 75)));\n    \n\n            const x = e.clientX - 40;\n            const y = e.clientY - 40;\n            element.style.position = \"absolute\";\n            element.style.left = `${x}px`;\n            element.style.top = `${y}px`;\n\n            setActivePiece(element);\n\n        }\n    }\n\n    // MOVE PIECE\n\n    function movePiece(e: React.MouseEvent){\n        const element = e.target as HTMLElement;\n        const chessboard = chessboardRef.current;\n        if(activePiece && chessboard){\n            const minX = chessboard.offsetLeft - 25;\n            const minY = chessboard.offsetTop -25;\n\n            const maxX = chessboard.offsetLeft + chessboard.clientWidth - 50;\n            const maxY = chessboard.offsetTop + chessboard.clientHeight - 50;\n\n            const x = e.clientX - 40;\n            const y = e.clientY - 40;\n\n            activePiece.style.position = \"absolute\";\n            \n            // if x is smaller than min\n            if (x < minX) {\n                activePiece.style.left = `${minX}px`;\n            }\n            // if x is greater than max\n            else if(x > maxX) {\n                activePiece.style.left = `${maxX}px`;\n            }\n            // if x within constraints\n            else {\n                activePiece.style.left = `${x}px`;\n            }\n\n            // if y is smaller than min\n            if (y < minY) {\n                activePiece.style.top = `${minY}px`;\n            }\n            // if y is greater than max\n            else if(y > maxY) {\n                activePiece.style.top = `${maxY}px`;\n            }\n            // if y is within constraints\n            else {\n                activePiece.style.top = `${y}px`;\n            }\n            \n        }\n    }\n\n    // DROP PIECE\n\n    function dropPiece(e: React.MouseEvent) {\n        const chessboard = chessboardRef.current;\n        if(activePiece && chessboard) {\n            const x = Math.floor((e.clientX - chessboard.offsetLeft) / 75);\n            const y = Math.abs(Math.ceil((e.clientY - chessboard.offsetTop - 600) / 75));\n\n            const currentPiece = pieces.find(p => p.position.x === gridX && p.position.y === gridY);\n\n            const attackedPiece = pieces.find(p => p.position.x === x && p.position.y === y);\n\n            if(currentPiece){\n                const validMove = referee.isValidMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces);\n                \n                const isEnPassantMove = referee.isEnPassantMove(gridX, gridY, x, y, currentPiece.type, currentPiece.team, pieces);\n\n                const pawnDirection = (currentPiece.team === TeamType.OUR) ? 1: -1;\n                \n                if(isEnPassantMove) {\n                    const updatedPieces = pieces.reduce((results, piece) => {\n                        if(piece.position.x === gridX && piece.position.y === gridY){\n                            piece.enPassant = false;\n                            piece.position.x = x;\n                            piece.position.y = y;\n                            results.push(piece);\n                        } \n                        else if(!(piece.position.x === x && piece.position.y === y - pawnDirection)){\n                            if(piece.type === PieceType.PAWN){\n                                piece.enPassant = false;\n                            }\n                            results.push(piece);\n                        }\n                        return results;\n\n                    }, [] as Piece[])\n\n                    setPieces(updatedPieces);\n                }\n                else if(validMove) {\n                    // updates position and if a piece is attacked it gets removed\n                    const updatedPieces = pieces.reduce((results, piece) => {\n                        if(piece.position.x === gridX && piece.position.y === gridY){\n                            if(Math.abs(gridY - y)=== 2 && piece.type === PieceType.PAWN){\n                                //Special move\n                                piece.enPassant = true;\n                            } else{\n                                piece.enPassant = false;\n                            }\n                            piece.position.x = x;\n                            piece.position.y = y;\n                            results.push(piece);\n                        }\n                        else if(!(piece.position.x === x && piece.position.y === y)){\n                            if(piece.type === PieceType.PAWN){\n                                piece.enPassant = false;\n                            }\n                            results.push(piece);\n                        }\n                        \n                        return results;\n                    }, [] as Piece[])\n                    \n                    setPieces(updatedPieces);\n\n               \n                }\n                else {\n                    // resets piece position\n                    activePiece.style.position = \"relative\";\n                    activePiece.style.removeProperty(\"top\");\n                    activePiece.style.removeProperty(\"left\");\n                }\n            }\n\n          \n        \n            setActivePiece(null);\n        }\n    }\n\n    \n    let board = [];\n\n        for(let j = verticalAxis.length - 1; j >= 0; j--){\n            for(let i = 0; i < horizontalAxis.length; i++){\n                const number = j + i + 2;\n                let image = \"\";\n                pieces.forEach(p => {\n                    if(p.position.x === i && p.position.y === j){\n                        image = p.image;\n                    }\n                  });\n                board.push(<Tile key={`${i},${j}`} image={image} number= {number} />);\n               \n        }\n    }\n    return <div \n            onMouseMove={e => movePiece(e)} \n            onMouseDown={e => grabPiece(e)} \n            onMouseUp={e => dropPiece(e)}\n            id=\"chessboard\"\n            ref = {chessboardRef}\n        >\n        {board}\n    </div>\n}\n"],"mappings":";;AAAA,SAAQA,MAAM,EAAEC,QAAQ,QAAO,OAAO;AACtC,OAAO,kBAAkB;AACzB,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,SAASC,YAAY,EAAEC,cAAc,EAAmBC,QAAQ,EAAEC,SAAS,EAAEC,iBAAiB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOxH,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAqB,IAAI,CAAC;EACxE,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAkB,IAAI,CAAC;EACvE,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAUO,iBAAiB,CAAC;EAChE,MAAMW,aAAa,GAAGnB,MAAM,CAAiB,IAAI,CAAC;EAClD,MAAMoB,OAAO,GAAG,IAAIjB,OAAO,CAAD,CAAC;EAI3B,SAASkB,SAASA,CAACC,CAA+C,EAAC;IAC/D,MAAMC,OAAO,GAAGD,CAAC,CAACE,MAAqB;IACvC,MAAMC,UAAU,GAAGN,aAAa,CAACO,OAAO;IACxC,IAAGH,OAAO,CAACI,SAAS,CAACC,QAAQ,CAAC,aAAa,CAAC,IAAIH,UAAU,EAAC;MACvDT,eAAe,CAACa,IAAI,CAACC,KAAK,CAAC,CAACR,CAAC,CAACS,OAAO,GAAGN,UAAU,CAACO,UAAU,IAAI,EAAE,CAAC,EAAGH,IAAI,CAACI,GAAG,CAACJ,IAAI,CAACK,IAAI,CAAC,CAACZ,CAAC,CAACa,OAAO,GAAGV,UAAU,CAACW,SAAS,GAAG,GAAG,IAAI,EAAE,CAAC,CAAE,CAAC;MAC3IC,QAAQ,CAACR,IAAI,CAACI,GAAG,CAACJ,IAAI,CAACK,IAAI,CAAC,CAACZ,CAAC,CAACa,OAAO,GAAGV,UAAU,CAACW,SAAS,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC;MAG5E,MAAME,CAAC,GAAGhB,CAAC,CAACS,OAAO,GAAG,EAAE;MACxB,MAAMQ,CAAC,GAAGjB,CAAC,CAACa,OAAO,GAAG,EAAE;MACxBZ,OAAO,CAACiB,KAAK,CAACC,QAAQ,GAAG,UAAU;MACnClB,OAAO,CAACiB,KAAK,CAACE,IAAI,GAAI,GAAEJ,CAAE,IAAG;MAC7Bf,OAAO,CAACiB,KAAK,CAACG,GAAG,GAAI,GAAEJ,CAAE,IAAG;MAE5BzB,cAAc,CAACS,OAAO,CAAC;IAE3B;EACJ;;EAEA;;EAEA,SAASqB,SAASA,CAACtB,CAAmB,EAAC;IACnC,MAAMC,OAAO,GAAGD,CAAC,CAACE,MAAqB;IACvC,MAAMC,UAAU,GAAGN,aAAa,CAACO,OAAO;IACxC,IAAGb,WAAW,IAAIY,UAAU,EAAC;MACzB,MAAMoB,IAAI,GAAGpB,UAAU,CAACO,UAAU,GAAG,EAAE;MACvC,MAAMc,IAAI,GAAGrB,UAAU,CAACW,SAAS,GAAE,EAAE;MAErC,MAAMW,IAAI,GAAGtB,UAAU,CAACO,UAAU,GAAGP,UAAU,CAACuB,WAAW,GAAG,EAAE;MAChE,MAAMC,IAAI,GAAGxB,UAAU,CAACW,SAAS,GAAGX,UAAU,CAACyB,YAAY,GAAG,EAAE;MAEhE,MAAMZ,CAAC,GAAGhB,CAAC,CAACS,OAAO,GAAG,EAAE;MACxB,MAAMQ,CAAC,GAAGjB,CAAC,CAACa,OAAO,GAAG,EAAE;MAExBtB,WAAW,CAAC2B,KAAK,CAACC,QAAQ,GAAG,UAAU;;MAEvC;MACA,IAAIH,CAAC,GAAGO,IAAI,EAAE;QACVhC,WAAW,CAAC2B,KAAK,CAACE,IAAI,GAAI,GAAEG,IAAK,IAAG;MACxC;MACA;MAAA,KACK,IAAGP,CAAC,GAAGS,IAAI,EAAE;QACdlC,WAAW,CAAC2B,KAAK,CAACE,IAAI,GAAI,GAAEK,IAAK,IAAG;MACxC;MACA;MAAA,KACK;QACDlC,WAAW,CAAC2B,KAAK,CAACE,IAAI,GAAI,GAAEJ,CAAE,IAAG;MACrC;;MAEA;MACA,IAAIC,CAAC,GAAGO,IAAI,EAAE;QACVjC,WAAW,CAAC2B,KAAK,CAACG,GAAG,GAAI,GAAEG,IAAK,IAAG;MACvC;MACA;MAAA,KACK,IAAGP,CAAC,GAAGU,IAAI,EAAE;QACdpC,WAAW,CAAC2B,KAAK,CAACG,GAAG,GAAI,GAAEM,IAAK,IAAG;MACvC;MACA;MAAA,KACK;QACDpC,WAAW,CAAC2B,KAAK,CAACG,GAAG,GAAI,GAAEJ,CAAE,IAAG;MACpC;IAEJ;EACJ;;EAEA;;EAEA,SAASY,SAASA,CAAC7B,CAAmB,EAAE;IACpC,MAAMG,UAAU,GAAGN,aAAa,CAACO,OAAO;IACxC,IAAGb,WAAW,IAAIY,UAAU,EAAE;MAC1B,MAAMa,CAAC,GAAGT,IAAI,CAACC,KAAK,CAAC,CAACR,CAAC,CAACS,OAAO,GAAGN,UAAU,CAACO,UAAU,IAAI,EAAE,CAAC;MAC9D,MAAMO,CAAC,GAAGV,IAAI,CAACI,GAAG,CAACJ,IAAI,CAACK,IAAI,CAAC,CAACZ,CAAC,CAACa,OAAO,GAAGV,UAAU,CAACW,SAAS,GAAG,GAAG,IAAI,EAAE,CAAC,CAAC;MAE5E,MAAMgB,YAAY,GAAGnC,MAAM,CAACoC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACb,QAAQ,CAACH,CAAC,KAAKiB,KAAK,IAAID,CAAC,CAACb,QAAQ,CAACF,CAAC,KAAKiB,KAAK,CAAC;MAEvF,MAAMC,aAAa,GAAGxC,MAAM,CAACoC,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACb,QAAQ,CAACH,CAAC,KAAKA,CAAC,IAAIgB,CAAC,CAACb,QAAQ,CAACF,CAAC,KAAKA,CAAC,CAAC;MAEhF,IAAGa,YAAY,EAAC;QACZ,MAAMM,SAAS,GAAGtC,OAAO,CAACuC,WAAW,CAACJ,KAAK,EAAEC,KAAK,EAAElB,CAAC,EAAEC,CAAC,EAAEa,YAAY,CAACQ,IAAI,EAAER,YAAY,CAACS,IAAI,EAAE5C,MAAM,CAAC;QAEvG,MAAM6C,eAAe,GAAG1C,OAAO,CAAC0C,eAAe,CAACP,KAAK,EAAEC,KAAK,EAAElB,CAAC,EAAEC,CAAC,EAAEa,YAAY,CAACQ,IAAI,EAAER,YAAY,CAACS,IAAI,EAAE5C,MAAM,CAAC;QAEjH,MAAM8C,aAAa,GAAIX,YAAY,CAACS,IAAI,KAAKvD,QAAQ,CAAC0D,GAAG,GAAI,CAAC,GAAE,CAAC,CAAC;QAElE,IAAGF,eAAe,EAAE;UAChB,MAAMG,aAAa,GAAGhD,MAAM,CAACiD,MAAM,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;YACpD,IAAGA,KAAK,CAAC3B,QAAQ,CAACH,CAAC,KAAKiB,KAAK,IAAIa,KAAK,CAAC3B,QAAQ,CAACF,CAAC,KAAKiB,KAAK,EAAC;cACxDY,KAAK,CAACC,SAAS,GAAG,KAAK;cACvBD,KAAK,CAAC3B,QAAQ,CAACH,CAAC,GAAGA,CAAC;cACpB8B,KAAK,CAAC3B,QAAQ,CAACF,CAAC,GAAGA,CAAC;cACpB4B,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;YACvB,CAAC,MACI,IAAG,EAAEA,KAAK,CAAC3B,QAAQ,CAACH,CAAC,KAAKA,CAAC,IAAI8B,KAAK,CAAC3B,QAAQ,CAACF,CAAC,KAAKA,CAAC,GAAGwB,aAAa,CAAC,EAAC;cACxE,IAAGK,KAAK,CAACR,IAAI,KAAKrD,SAAS,CAACgE,IAAI,EAAC;gBAC7BH,KAAK,CAACC,SAAS,GAAG,KAAK;cAC3B;cACAF,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;YACvB;YACA,OAAOD,OAAO;UAElB,CAAC,EAAE,EAAa,CAAC;UAEjBjD,SAAS,CAAC+C,aAAa,CAAC;QAC5B,CAAC,MACI,IAAGP,SAAS,EAAE;UACf;UACA,MAAMO,aAAa,GAAGhD,MAAM,CAACiD,MAAM,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAK;YACpD,IAAGA,KAAK,CAAC3B,QAAQ,CAACH,CAAC,KAAKiB,KAAK,IAAIa,KAAK,CAAC3B,QAAQ,CAACF,CAAC,KAAKiB,KAAK,EAAC;cACxD,IAAG3B,IAAI,CAACI,GAAG,CAACuB,KAAK,GAAGjB,CAAC,CAAC,KAAI,CAAC,IAAI6B,KAAK,CAACR,IAAI,KAAKrD,SAAS,CAACgE,IAAI,EAAC;gBACzD;gBACAH,KAAK,CAACC,SAAS,GAAG,IAAI;cAC1B,CAAC,MAAK;gBACFD,KAAK,CAACC,SAAS,GAAG,KAAK;cAC3B;cACAD,KAAK,CAAC3B,QAAQ,CAACH,CAAC,GAAGA,CAAC;cACpB8B,KAAK,CAAC3B,QAAQ,CAACF,CAAC,GAAGA,CAAC;cACpB4B,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;YACvB,CAAC,MACI,IAAG,EAAEA,KAAK,CAAC3B,QAAQ,CAACH,CAAC,KAAKA,CAAC,IAAI8B,KAAK,CAAC3B,QAAQ,CAACF,CAAC,KAAKA,CAAC,CAAC,EAAC;cACxD,IAAG6B,KAAK,CAACR,IAAI,KAAKrD,SAAS,CAACgE,IAAI,EAAC;gBAC7BH,KAAK,CAACC,SAAS,GAAG,KAAK;cAC3B;cACAF,OAAO,CAACG,IAAI,CAACF,KAAK,CAAC;YACvB;YAEA,OAAOD,OAAO;UAClB,CAAC,EAAE,EAAa,CAAC;UAEjBjD,SAAS,CAAC+C,aAAa,CAAC;QAG5B,CAAC,MACI;UACD;UACApD,WAAW,CAAC2B,KAAK,CAACC,QAAQ,GAAG,UAAU;UACvC5B,WAAW,CAAC2B,KAAK,CAACgC,cAAc,CAAC,KAAK,CAAC;UACvC3D,WAAW,CAAC2B,KAAK,CAACgC,cAAc,CAAC,MAAM,CAAC;QAC5C;MACJ;MAIA1D,cAAc,CAAC,IAAI,CAAC;IACxB;EACJ;EAGA,IAAI2D,KAAK,GAAG,EAAE;EAEV,KAAI,IAAIC,CAAC,GAAGtE,YAAY,CAACuE,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAC;IAC7C,KAAI,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvE,cAAc,CAACsE,MAAM,EAAEC,CAAC,EAAE,EAAC;MAC1C,MAAMC,MAAM,GAAGH,CAAC,GAAGE,CAAC,GAAG,CAAC;MACxB,IAAIE,KAAK,GAAG,EAAE;MACd7D,MAAM,CAAC8D,OAAO,CAACzB,CAAC,IAAI;QAChB,IAAGA,CAAC,CAACb,QAAQ,CAACH,CAAC,KAAKsC,CAAC,IAAItB,CAAC,CAACb,QAAQ,CAACF,CAAC,KAAKmC,CAAC,EAAC;UACxCI,KAAK,GAAGxB,CAAC,CAACwB,KAAK;QACnB;MACF,CAAC,CAAC;MACJL,KAAK,CAACH,IAAI,eAAC5D,OAAA,CAACR,IAAI;QAAmB4E,KAAK,EAAEA,KAAM;QAACD,MAAM,EAAGA;MAAO,GAA1C,GAAED,CAAE,IAAGF,CAAE,EAAC;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAkC,CAAC,CAAC;IAE7E;EACJ;EACA,oBAAOzE,OAAA;IACC0E,WAAW,EAAE9D,CAAC,IAAIsB,SAAS,CAACtB,CAAC,CAAE;IAC/B+D,WAAW,EAAE/D,CAAC,IAAID,SAAS,CAACC,CAAC,CAAE;IAC/BgE,SAAS,EAAEhE,CAAC,IAAI6B,SAAS,CAAC7B,CAAC,CAAE;IAC7BiE,EAAE,EAAC,YAAY;IACfC,GAAG,EAAIrE,aAAc;IAAAsE,QAAA,EAExBhB;EAAK;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AACV;AAACvE,EAAA,CApLuBD,UAAU;AAAA+E,EAAA,GAAV/E,UAAU;AAAA,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}