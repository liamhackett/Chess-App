{"ast":null,"code":"import { samePosition, PieceType, TeamType } from \"../Constants\";\nexport default class Referee {\n  tileIsEmptyOrOccupiedByOpponent(position, boardState, team) {\n    return !this.tileIsOccupied(position, boardState) || this.tileIsOccupiedByOpponent(position, boardState, team);\n  }\n  tileIsOccupied(position, boardState) {\n    const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y);\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  tileIsOccupiedByOpponent(position, boardState, team) {\n    const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y && p.team !== team);\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  isEnPassantMove(initialPosition, desiredPosition, type, team, boardState) {\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n    // upper left or upper right || bottom left or bottom right\n    // if a piece is under or above the attacked tile\n\n    if (type == PieceType.PAWN) {\n      if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1) && desiredPosition.y - initialPosition.y === pawnDirection) {\n        const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n        if (piece) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  // pawnMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]){\n  //     const specialRow = team === TeamType.OUR ? 1 : 6;\n  //     const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n  //     // Forward movement\n  //     if (initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 * pawnDirection) {\n  //         return !this.tileIsOccupied(desiredPosition, boardState) && !this.tileIsOccupied({ x: desiredPosition.x, y: desiredPosition.y - pawnDirection }, boardState);\n  //     }\n\n  //     // Normal forward movement\n  //     if (desiredPosition.x === initialPosition.x && (desiredPosition.y - initialPosition.y === pawnDirection)) {\n  //         return !this.tileIsOccupied(desiredPosition, boardState);\n  //     }\n\n  //     // Taking a piece diagonally\n  //     if (Math.abs(desiredPosition.x - initialPosition.x) === 1 && desiredPosition.y - initialPosition.y === pawnDirection) {\n  //         return this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n  //     }\n\n  //     return false;\n  // }\n\n  // Knight Function\n  knightMove(initialPosition, desiredPosition, type, team, boardState) {\n    // KNIGHT MOVING LOGIC\n    // 8 Different moving patterns\n    for (let i = -1; i < 2; i += 2) {\n      for (let j = -1; j < 2; j += 2) {\n        if (desiredPosition.y - initialPosition.y === i * 2) {\n          if (desiredPosition.x - initialPosition.x === j) {\n            return this.tileIsEmptyOrOccupiedByOpponent(desiredPosition, boardState, team);\n          }\n        } else if (desiredPosition.x - initialPosition.x === i * 2) {\n          if (desiredPosition.y - initialPosition.y === j) {\n            return this.tileIsEmptyOrOccupiedByOpponent(desiredPosition, boardState, team);\n          }\n        }\n      }\n    }\n  }\n\n  // Bishop Function\n  bishopMove(initialPosition, desiredPosition, type, team, boardState) {\n    // BISHOP MOVING AND ATTACK LOGIC\n\n    for (let i = 1; i < 8; i++) {\n      // diagonal \n      let multiplierX = desiredPosition.x < initialPosition.x ? -1 : 1;\n      let multiplierY = desiredPosition.y < initialPosition.y ? -1 : 1;\n      let passedPosition = {\n        x: initialPosition.x + i * multiplierX,\n        y: initialPosition.y + i * multiplierY\n      };\n      if (samePosition(passedPosition, desiredPosition)) {\n        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n      } else {\n        if (this.tileIsOccupied(passedPosition, boardState)) {\n          break;\n        }\n      }\n    }\n    return false;\n  }\n\n  // Rook function\n  rookMove(initialPosition, desiredPosition, type, team, boardState) {\n    // ROOK MOVING AND ATTACK LOGIC\n    for (let i = 1; i < 8; i++) {\n      // Vertical Movement\n      let passedPosition;\n      if (initialPosition.x === desiredPosition.x) {\n        let multiplier = desiredPosition.y < initialPosition.y ? -1 : 1;\n        passedPosition = {\n          x: initialPosition.x,\n          y: initialPosition.y + i * multiplier\n        };\n      }\n      // Horizontal\n      else if (initialPosition.y === desiredPosition.y) {\n        let multiplier = desiredPosition.x < initialPosition.x ? -1 : 1;\n        passedPosition = {\n          x: initialPosition.x + i * multiplier,\n          y: initialPosition.y\n        };\n      }\n      if (passedPosition) {\n        if (samePosition(passedPosition, desiredPosition)) {\n          return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n        } else if (this.tileIsOccupied(passedPosition, boardState)) {\n          break;\n        }\n      }\n    }\n    return false;\n  }\n  queenMove(initialPosition, desiredPosition, type, team, boardState) {\n    // if (desiredPosition.x === initialPosition.x || desiredPosition.y === initialPosition.y){\n    //     return this.rookMove(initialPosition, desiredPosition, type, team, boardState);\n    // }\n    // else{\n    //     return this.bishopMove(initialPosition, desiredPosition, type, team, boardState);\n\n    // }\n    for (let i = 1; i < 8; i++) {\n      const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n      const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n      let passedPosition = {\n        x: initialPosition.x + i * multiplierX,\n        y: initialPosition.y + i * multiplierY\n      };\n      if (samePosition(passedPosition, desiredPosition)) {\n        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n      } else {\n        if (this.tileIsOccupied(passedPosition, boardState)) {\n          break;\n        }\n      }\n    }\n    return false;\n  }\n  kingMove(initialPosition, desiredPosition, type, team, boardState) {\n    // Basic king movement\n    const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n    const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n    let passedPosition = {\n      x: initialPosition.x + 1 * multiplierX,\n      y: initialPosition.y + 1 * multiplierY\n    };\n    if (samePosition(passedPosition, desiredPosition)) {\n      return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n    }\n    return false;\n  }\n\n  // Valid Move Function\n  isValidMove(initialPosition, desiredPosition, type, team, boardState) {\n    switch (type) {\n      case PieceType.PAWN:\n        return this.pawnMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.KNIGHT:\n        return this.knightMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.BISHOP:\n        return this.bishopMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.ROOK:\n        return this.rookMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.QUEEN:\n        return this.queenMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.KING:\n        return this.kingMove(initialPosition, desiredPosition, type, team, boardState);\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["samePosition","PieceType","TeamType","Referee","tileIsEmptyOrOccupiedByOpponent","position","boardState","team","tileIsOccupied","tileIsOccupiedByOpponent","piece","find","p","x","y","isEnPassantMove","initialPosition","desiredPosition","type","pawnDirection","OUR","PAWN","enPassant","knightMove","i","j","bishopMove","multiplierX","multiplierY","passedPosition","rookMove","multiplier","queenMove","kingMove","isValidMove","pawnMove","KNIGHT","BISHOP","ROOK","QUEEN","KING"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/referee/Referee.ts"],"sourcesContent":["import { PassThrough } from \"stream\";\nimport { samePosition, PieceType, TeamType , Piece, Position} from \"../Constants\";\nimport { pawnMove } from \"./rules/PawnRules\";\n\nexport default class Referee {\n    tileIsEmptyOrOccupiedByOpponent(position: Position, boardState: Piece[], team: TeamType): boolean{\n        return !this.tileIsOccupied(position, boardState) || this.tileIsOccupiedByOpponent(position, boardState, team);\n    }\n    tileIsOccupied(position: Position, boardState: Piece[]): boolean {\n        const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y);\n        if(piece){\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    tileIsOccupiedByOpponent(position: Position, boardState: Piece[], team: TeamType): boolean {\n        const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y && p.team !== team);\n        if (piece) {\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n    isEnPassantMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]){\n        const pawnDirection = (team === TeamType.OUR) ? 1: -1;\n       \n        // upper left or upper right || bottom left or bottom right\n        // if a piece is under or above the attacked tile\n\n        if (type == PieceType.PAWN){\n            if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1)&& desiredPosition.y - initialPosition.y === pawnDirection){\n                const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n                if(piece){\n                    return true;\n                }\n            }\n            \n        }\n       \n       return false;\n    }\n\n    // pawnMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]){\n    //     const specialRow = team === TeamType.OUR ? 1 : 6;\n    //     const pawnDirection = team === TeamType.OUR ? 1 : -1;\n        \n    //     // Forward movement\n    //     if (initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 * pawnDirection) {\n    //         return !this.tileIsOccupied(desiredPosition, boardState) && !this.tileIsOccupied({ x: desiredPosition.x, y: desiredPosition.y - pawnDirection }, boardState);\n    //     }\n        \n    //     // Normal forward movement\n    //     if (desiredPosition.x === initialPosition.x && (desiredPosition.y - initialPosition.y === pawnDirection)) {\n    //         return !this.tileIsOccupied(desiredPosition, boardState);\n    //     }\n        \n    //     // Taking a piece diagonally\n    //     if (Math.abs(desiredPosition.x - initialPosition.x) === 1 && desiredPosition.y - initialPosition.y === pawnDirection) {\n    //         return this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n    //     }\n\n    //     return false;\n    // }\n          \n    \n    \n    // Knight Function\n    knightMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n        // KNIGHT MOVING LOGIC\n        // 8 Different moving patterns\n        for(let i = -1; i < 2; i+=2){\n            for(let j = -1; j < 2; j+=2){\n                if (desiredPosition.y - initialPosition.y === i * 2){\n                    if (desiredPosition.x - initialPosition.x === j){\n                        return this.tileIsEmptyOrOccupiedByOpponent(desiredPosition, boardState, team);\n                        \n                    }\n                }\n                else if (desiredPosition.x - initialPosition.x === i * 2){\n                    if(desiredPosition.y - initialPosition.y === j){\n                        return this.tileIsEmptyOrOccupiedByOpponent(desiredPosition, boardState, team);\n                    }\n                }\n            }\n        }\n    }\n\n    // Bishop Function\n    bishopMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n        // BISHOP MOVING AND ATTACK LOGIC\n        \n        for (let i = 1; i < 8; i++){\n\n            // diagonal \n            let multiplierX = (desiredPosition.x < initialPosition.x) ? -1 : 1;\n            let multiplierY = (desiredPosition.y < initialPosition.y) ? -1 : 1;\n            \n            let passedPosition: Position = {x: initialPosition.x + (i * multiplierX), y: initialPosition.y + (i * multiplierY)};\n\n            if(samePosition(passedPosition, desiredPosition)){\n                return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n            }\n            else{\n                if(this.tileIsOccupied(passedPosition, boardState)){\n                    break;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // Rook function\n    rookMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n        // ROOK MOVING AND ATTACK LOGIC\n        for (let i = 1; i < 8; i++){\n            // Vertical Movement\n            let passedPosition;\n            if(initialPosition.x === desiredPosition.x){\n                let multiplier = (desiredPosition.y < initialPosition.y) ? -1 : 1;\n                passedPosition = {x: initialPosition.x, y: initialPosition.y + (i * multiplier)};\n            }\n            // Horizontal\n            else if(initialPosition.y === desiredPosition.y){\n                let multiplier = (desiredPosition.x < initialPosition.x) ? -1 : 1;\n                passedPosition= {x: initialPosition.x + (i * multiplier), y: initialPosition.y};\n\n            }\n            if(passedPosition) {\n                if (samePosition(passedPosition, desiredPosition)) {\n                    return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                }\n                else if (this.tileIsOccupied(passedPosition, boardState)){\n                    break;\n                }\n            }\n        }\n        \n        return false;\n    \n    }\n\n    queenMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n        // if (desiredPosition.x === initialPosition.x || desiredPosition.y === initialPosition.y){\n        //     return this.rookMove(initialPosition, desiredPosition, type, team, boardState);\n        // }\n        // else{\n        //     return this.bishopMove(initialPosition, desiredPosition, type, team, boardState);\n    \n        // }\n        for(let i = 1; i < 8; i++){\n            const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n\n            const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n            \n            let passedPosition: Position = {x: initialPosition.x + (i * multiplierX), y: initialPosition.y + (i * multiplierY)};\n\n            if(samePosition(passedPosition, desiredPosition)){\n                return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n            }\n            else{\n                if(this.tileIsOccupied(passedPosition, boardState)){\n                    break;\n                }\n            }\n        }\n\n        return false;\n    }\n    \n    kingMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n        // Basic king movement\n        const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n\n        const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n        \n        let passedPosition: Position = {x: initialPosition.x + (1 * multiplierX), y: initialPosition.y + (1 * multiplierY)};\n\n        if(samePosition(passedPosition, desiredPosition)){\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n        }\n\n        return false;\n    }\n\n    // Valid Move Function\n    isValidMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n\n        switch(type) {\n            case PieceType.PAWN:\n                return this.pawnMove(initialPosition, desiredPosition, type, team, boardState);\n            \n                case PieceType.KNIGHT:\n                return this.knightMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.BISHOP:\n                return this.bishopMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.ROOK:\n                return this.rookMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.QUEEN:\n                return this.queenMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.KING:\n                return this.kingMove(initialPosition, desiredPosition, type, team, boardState);\n        }\n        \n\n        return false;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}