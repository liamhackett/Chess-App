{"ast":null,"code":"import { samePosition, PieceType, TeamType } from \"../Constants\";\nimport { pawnMove } from \"./rules/PawnRules\";\nimport { knightMove } from \"./rules/KnightRules\";\nimport { bishopMove } from \"./rules/BishopRules\";\nimport { rookMove } from \"./rules/RookRules\";\nimport { tileIsOccupied, tileIsEmptyOrOccupiedByOpponent } from \"./rules/GeneralRules\";\nexport default class Referee {\n  isEnPassantMove(initialPosition, desiredPosition, type, team, boardState) {\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n    // upper left or upper right || bottom left or bottom right\n    // if a piece is under or above the attacked tile\n\n    if (type == PieceType.PAWN) {\n      if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1) && desiredPosition.y - initialPosition.y === pawnDirection) {\n        const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n        if (piece) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  queenMove(initialPosition, desiredPosition, type, team, boardState) {\n    // if (desiredPosition.x === initialPosition.x || desiredPosition.y === initialPosition.y){\n    //     return this.rookMove(initialPosition, desiredPosition, type, team, boardState);\n    // }\n    // else{\n    //     return this.bishopMove(initialPosition, desiredPosition, type, team, boardState);\n\n    // }\n    for (let i = 1; i < 8; i++) {\n      const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n      const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n      let passedPosition = {\n        x: initialPosition.x + i * multiplierX,\n        y: initialPosition.y + i * multiplierY\n      };\n      if (samePosition(passedPosition, desiredPosition)) {\n        return tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n      } else {\n        if (tileIsOccupied(passedPosition, boardState)) {\n          break;\n        }\n      }\n    }\n    return false;\n  }\n  kingMove(initialPosition, desiredPosition, type, team, boardState) {\n    // Basic king movement\n    const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n    const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n    let passedPosition = {\n      x: initialPosition.x + 1 * multiplierX,\n      y: initialPosition.y + 1 * multiplierY\n    };\n    if (samePosition(passedPosition, desiredPosition)) {\n      return tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n    }\n    return false;\n  }\n\n  // Valid Move Function\n  isValidMove(initialPosition, desiredPosition, type, team, boardState) {\n    switch (type) {\n      case PieceType.PAWN:\n        return pawnMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.KNIGHT:\n        return knightMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.BISHOP:\n        return bishopMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.ROOK:\n        return rookMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.QUEEN:\n        return this.queenMove(initialPosition, desiredPosition, type, team, boardState);\n      case PieceType.KING:\n        return this.kingMove(initialPosition, desiredPosition, type, team, boardState);\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["samePosition","PieceType","TeamType","pawnMove","knightMove","bishopMove","rookMove","tileIsOccupied","tileIsEmptyOrOccupiedByOpponent","Referee","isEnPassantMove","initialPosition","desiredPosition","type","team","boardState","pawnDirection","OUR","PAWN","x","y","piece","find","p","position","enPassant","queenMove","i","multiplierX","multiplierY","passedPosition","kingMove","isValidMove","KNIGHT","BISHOP","ROOK","QUEEN","KING"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/referee/Referee.ts"],"sourcesContent":["\nimport { samePosition, PieceType, TeamType , Piece, Position} from \"../Constants\";\nimport { pawnMove } from \"./rules/PawnRules\";\nimport { knightMove } from \"./rules/KnightRules\";\nimport { bishopMove } from \"./rules/BishopRules\";\nimport { rookMove } from \"./rules/RookRules\";\n\nimport { tileIsOccupied, tileIsOccupiedByOpponent, tileIsEmptyOrOccupiedByOpponent } from \"./rules/GeneralRules\";\nexport default class Referee {\n    \n\n    isEnPassantMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]){\n        const pawnDirection = (team === TeamType.OUR) ? 1: -1;\n       \n        // upper left or upper right || bottom left or bottom right\n        // if a piece is under or above the attacked tile\n\n        if (type == PieceType.PAWN){\n            if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1)&& desiredPosition.y - initialPosition.y === pawnDirection){\n                const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n                if(piece){\n                    return true;\n                }\n            }\n            \n        }\n       \n       return false;\n    }\n\n\n   \n\n    queenMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n        // if (desiredPosition.x === initialPosition.x || desiredPosition.y === initialPosition.y){\n        //     return this.rookMove(initialPosition, desiredPosition, type, team, boardState);\n        // }\n        // else{\n        //     return this.bishopMove(initialPosition, desiredPosition, type, team, boardState);\n    \n        // }\n        for(let i = 1; i < 8; i++){\n            const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n\n            const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n            \n            let passedPosition: Position = {x: initialPosition.x + (i * multiplierX), y: initialPosition.y + (i * multiplierY)};\n\n            if(samePosition(passedPosition, desiredPosition)){\n                return tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n            }\n            else{\n                if(tileIsOccupied(passedPosition, boardState)){\n                    break;\n                }\n            }\n        }\n\n        return false;\n    }\n    \n    kingMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n        // Basic king movement\n        const multiplierX = desiredPosition.x < initialPosition.x ? -1 : desiredPosition.x > initialPosition.x ? 1 : 0;\n\n        const multiplierY = desiredPosition.y < initialPosition.y ? -1 : desiredPosition.y > initialPosition.y ? 1 : 0;\n        \n        let passedPosition: Position = {x: initialPosition.x + (1 * multiplierX), y: initialPosition.y + (1 * multiplierY)};\n\n        if(samePosition(passedPosition, desiredPosition)){\n            return tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n        }\n\n        return false;\n    }\n\n    // Valid Move Function\n    isValidMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n\n        switch(type) {\n            case PieceType.PAWN:\n                return pawnMove(initialPosition, desiredPosition, type, team, boardState);\n            \n                case PieceType.KNIGHT:\n                return knightMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.BISHOP:\n                return bishopMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.ROOK:\n                return rookMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.QUEEN:\n                return this.queenMove(initialPosition, desiredPosition, type, team, boardState);\n            \n            case PieceType.KING:\n                return this.kingMove(initialPosition, desiredPosition, type, team, boardState);\n        }\n        \n\n        return false;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}