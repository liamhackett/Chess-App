{"ast":null,"code":"import { PieceType, TeamType } from \"../Constants\";\nexport default class Referee {\n  tileIsOccupied(position, boardState) {\n    const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y);\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  tileIsOccupiedByOpponent(position, boardState, team) {\n    const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y && p.team !== team);\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  isEnPassantMove(initialPosition, desiredPosition, type, team, boardState) {\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n    // upper left or upper right || bottom left or bottom right\n    // if a piece is under or above the attacked tile\n\n    if (type == PieceType.PAWN) {\n      if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1) && desiredPosition.y - initialPosition.y === pawnDirection) {\n        const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n        if (piece) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  isValidMove(initialPosition, desiredPosition, type, team, boardState) {\n    // console.log(\"Ref is checking move\");\n    // console.log(`\"Previous Location: ${px} ${py}`);\n    // console.log(`\"Current Location: ${x} ${y}`);\n    // console.log(`Piece Type: ${type}`);\n    // console.log(`Team: ${team}`);\n\n    // pawn movement \n    if (type === PieceType.PAWN) {\n      const specialRow = team === TeamType.OUR ? 1 : 6;\n      const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n      // forward movement\n      if (initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 * pawnDirection) {\n        if (!this.tileIsOccupied(desiredPosition, boardState) && !this.tileIsOccupied({\n          x: desiredPosition.x,\n          y: desiredPosition.y - pawnDirection\n        }, boardState)) {\n          return true;\n        }\n      } else if (initialPosition.x === desiredPosition.x && desiredPosition.y - initialPosition.y === pawnDirection) {\n        if (!this.tileIsOccupied(desiredPosition, boardState)) {\n          return true;\n        }\n      }\n\n      // taking a piece\n      else if (desiredPosition.x - initialPosition.x === -1 && desiredPosition.y - initialPosition.y === pawnDirection) {\n        // attack in upper or bottom left corner\n        if (this.tileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\n          return true;\n        }\n      } else if (desiredPosition.x - initialPosition.x === 1 && desiredPosition.y - initialPosition.y === pawnDirection) {\n        // attack in upper or bottom right corner\n        if (this.tileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\n          return true;\n        }\n      }\n    } else if (type === PieceType.KNIGHT) {\n      // KNIGHT MOVING LOGIC\n      // 8 Different moving patterns\n      for (let i = -1; i < 2; i += 2) {\n        for (let j = -1; j < 2; j += 2) {\n          if (desiredPosition.y - initialPosition.y === i * 2) {\n            if (desiredPosition.x - initialPosition.x === j) {\n              if (this.tileIsOccupied(desiredPosition, boardState)) {\n                return this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n              }\n              return true;\n            }\n          } else if (desiredPosition.x - initialPosition.x === i * 2) {\n            if (desiredPosition.y - initialPosition.y === j) {\n              if (this.tileIsOccupied(desiredPosition, boardState)) {\n                return this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n              }\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["PieceType","TeamType","Referee","tileIsOccupied","position","boardState","piece","find","p","x","y","tileIsOccupiedByOpponent","team","isEnPassantMove","initialPosition","desiredPosition","type","pawnDirection","OUR","PAWN","enPassant","isValidMove","specialRow","KNIGHT","i","j"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/referee/Referee.ts"],"sourcesContent":["import { PieceType, TeamType , Piece, Position} from \"../Constants\";\n\nexport default class Referee {\n    tileIsEmptyOrOccupiedByOpponent(position: Position, boardState: Piece[], team)\n    tileIsOccupied(position: Position, boardState: Piece[]): boolean {\n        const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y);\n        if(piece){\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    tileIsOccupiedByOpponent(position: Position, boardState: Piece[], team: TeamType): boolean {\n        const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y && p.team !== team);\n        if (piece) {\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n    isEnPassantMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]){\n        const pawnDirection = (team === TeamType.OUR) ? 1: -1;\n       \n        // upper left or upper right || bottom left or bottom right\n        // if a piece is under or above the attacked tile\n\n        if (type == PieceType.PAWN){\n            if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1)&& desiredPosition.y - initialPosition.y === pawnDirection){\n                const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n                if(piece){\n                    return true;\n                }\n            }\n            \n        }\n       \n       return false;\n    }\n\n    isValidMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n        // console.log(\"Ref is checking move\");\n        // console.log(`\"Previous Location: ${px} ${py}`);\n        // console.log(`\"Current Location: ${x} ${y}`);\n        // console.log(`Piece Type: ${type}`);\n        // console.log(`Team: ${team}`);\n\n        // pawn movement \n        if (type === PieceType.PAWN){\n            const specialRow = (team === TeamType.OUR) ? 1: 6;\n            const pawnDirection = (team === TeamType.OUR) ? 1: -1;\n            \n            // forward movement\n            if(initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 *pawnDirection){\n                if(!this.tileIsOccupied(desiredPosition, boardState) && !this.tileIsOccupied({x : desiredPosition.x, y: desiredPosition.y - pawnDirection}, boardState)){\n                        return true;\n                }\n            }\n            else if(initialPosition.x === desiredPosition.x && (desiredPosition.y - initialPosition.y === pawnDirection)){\n                    if(!this.tileIsOccupied(desiredPosition, boardState)){\n                        return true;\n                    }\n            }\n            \n            // taking a piece\n            else if (desiredPosition.x - initialPosition.x === -1 && desiredPosition.y - initialPosition.y === pawnDirection){\n                // attack in upper or bottom left corner\n                if(this.tileIsOccupiedByOpponent(desiredPosition, boardState, team)){\n                    return true;\n                }\n            }\n            else if (desiredPosition.x - initialPosition.x === 1 && desiredPosition.y - initialPosition.y === pawnDirection){\n                // attack in upper or bottom right corner\n                if(this.tileIsOccupiedByOpponent(desiredPosition, boardState, team)){\n                    return true;\n                }\n            }\n        }\n        else if (type === PieceType.KNIGHT){\n            // KNIGHT MOVING LOGIC\n            // 8 Different moving patterns\n            for(let i = -1; i < 2; i+=2){\n                for(let j = -1; j < 2; j+=2){\n                    if (desiredPosition.y - initialPosition.y === i * 2){\n                        if (desiredPosition.x - initialPosition.x === j){\n                            if(this.tileIsOccupied(desiredPosition, boardState)){\n                                return this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n                            }\n                            return true;\n                        }\n                    }\n                    else if (desiredPosition.x - initialPosition.x === i * 2){\n                        if(desiredPosition.y - initialPosition.y === j){\n                            if(this.tileIsOccupied(desiredPosition, boardState)){\n                                return this.tileIsOccupiedByOpponent(desiredPosition, boardState, team);\n                            }\n                            return true;\n                        }\n                    }\n                }\n            }\n\n\n        }\n            \n\n        \n\n\n        return false;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}