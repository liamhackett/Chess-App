{"ast":null,"code":"import { PieceType, TeamType } from \"../Constants\";\nexport default class Referee {\n  tileIsOccupied(x, y, boardState) {\n    // console.log(\"Checking if tile is occupied\");\n    const piece = boardState.find(p => p.position.x === x && p.position.y === y);\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  tileIsOccupiedByOpponent(x, y, boardState, team) {\n    const piece = boardState.find(p => p.position.x === x && p.position.y === y && p.team !== team);\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  isEnPassantMove(initialPosition, desiredPosition, type, team, boardState) {\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n    // upper left or upper right || bottom left or bottom right\n    // if a piece is under or above the attacked tile\n\n    if (type == PieceType.PAWN) {\n      if ((x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1) && desiredPosition.y - initialPosition.y === pawnDirection) {\n        const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n        if (piece) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  isValidMove(initialPosition, desiredPosition, type, team, boardState) {\n    // console.log(\"Ref is checking move\");\n    // console.log(`\"Previous Location: ${px} ${py}`);\n    // console.log(`\"Current Location: ${x} ${y}`);\n    // console.log(`Piece Type: ${type}`);\n    // console.log(`Team: ${team}`);\n\n    // pawn movement \n    if (type === PieceType.PAWN) {\n      const specialRow = team === TeamType.OUR ? 1 : 6;\n      const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n      // forward movement\n      if (initialPosition.y === specialRow && y - initialPosition.y === 2 * pawnDirection) {\n        if (!this.tileIsOccupied(x, y, boardState) && !this.tileIsOccupied(x, y - pawnDirection, boardState)) {\n          return true;\n        }\n      } else if (initialPosition.x === x && y - initialPosition.y === pawnDirection) {\n        if (!this.tileIsOccupied(x, y, boardState)) {\n          return true;\n        }\n      }\n\n      // taking a piece\n      else if (x - initialPosition.x === -1 && y - initialPosition.y === pawnDirection) {\n        // attack in upper or bottom left corner\n        if (this.tileIsOccupiedByOpponent(x, y, boardState, team)) {\n          return true;\n        }\n      } else if (x - initialPosition.x === 1 && y - initialPosition.y === pawnDirection) {\n        // attack in upper or bottom right corner\n        if (this.tileIsOccupiedByOpponent(x, y, boardState, team)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["PieceType","TeamType","Referee","tileIsOccupied","x","y","boardState","piece","find","p","position","tileIsOccupiedByOpponent","team","isEnPassantMove","initialPosition","desiredPosition","type","pawnDirection","OUR","PAWN","enPassant","isValidMove","specialRow"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/referee/Referee.ts"],"sourcesContent":["import { PieceType, TeamType , Piece, Position} from \"../Constants\";\n\nexport default class Referee {\n\n    tileIsOccupied(x: number, y: number, boardState: Piece[]): boolean {\n        // console.log(\"Checking if tile is occupied\");\n        const piece = boardState.find(p => p.position.x === x && p.position.y === y);\n        if(piece){\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    tileIsOccupiedByOpponent(x: number, y: number, boardState: Piece[], team: TeamType): boolean {\n        const piece = boardState.find(p => p.position.x === x && p.position.y === y && p.team !== team);\n        if (piece) {\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n    isEnPassantMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]){\n        const pawnDirection = (team === TeamType.OUR) ? 1: -1;\n       \n        // upper left or upper right || bottom left or bottom right\n        // if a piece is under or above the attacked tile\n\n        if (type == PieceType.PAWN){\n            if ((x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1)&& desiredPosition.y - initialPosition.y === pawnDirection){\n                const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n                if(piece){\n                    return true;\n                }\n            }\n            \n        }\n       \n       return false;\n    }\n\n    isValidMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n        // console.log(\"Ref is checking move\");\n        // console.log(`\"Previous Location: ${px} ${py}`);\n        // console.log(`\"Current Location: ${x} ${y}`);\n        // console.log(`Piece Type: ${type}`);\n        // console.log(`Team: ${team}`);\n\n        // pawn movement \n        if (type === PieceType.PAWN){\n            const specialRow = (team === TeamType.OUR) ? 1: 6;\n            const pawnDirection = (team === TeamType.OUR) ? 1: -1;\n            \n            // forward movement\n            if(initialPosition.y === specialRow && y - initialPosition.y === 2 *pawnDirection){\n                if(!this.tileIsOccupied(x, y, boardState) && !this.tileIsOccupied(x, y - pawnDirection, boardState)){\n                        return true;\n                }\n            }\n            else if(initialPosition.x === x && (y - initialPosition.y === pawnDirection)){\n                    if(!this.tileIsOccupied(x, y, boardState)){\n                        return true;\n                    }\n            }\n            \n            // taking a piece\n            else if (x - initialPosition.x === -1 && y - initialPosition.y === pawnDirection){\n                // attack in upper or bottom left corner\n                if(this.tileIsOccupiedByOpponent(x, y, boardState, team)){\n                    return true;\n                }\n            }\n            else if (x - initialPosition.x === 1 && y - initialPosition.y === pawnDirection){\n                // attack in upper or bottom right corner\n                if(this.tileIsOccupiedByOpponent(x, y, boardState, team)){\n                    return true;\n                }\n            }\n        }\n\n\n        return false;\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}