{"ast":null,"code":"import { PieceType, TeamType } from \"../Constants\";\nexport default class Referee {\n  tileIsEmptyOrOccupiedByOpponent(position, boardState, team) {\n    return !this.tileIsOccupied(position, boardState) || this.tileIsOccupiedByOpponent(position, boardState, team);\n  }\n  tileIsOccupied(position, boardState) {\n    const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y);\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  tileIsOccupiedByOpponent(position, boardState, team) {\n    const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y && p.team !== team);\n    if (piece) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  isEnPassantMove(initialPosition, desiredPosition, type, team, boardState) {\n    const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n    // upper left or upper right || bottom left or bottom right\n    // if a piece is under or above the attacked tile\n\n    if (type == PieceType.PAWN) {\n      if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1) && desiredPosition.y - initialPosition.y === pawnDirection) {\n        const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n        if (piece) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  isValidMove(initialPosition, desiredPosition, type, team, boardState) {\n    // pawn movement \n\n    switch (type) {\n      case PieceType.PAWN:\n        console.log(\"Pawn\");\n        break;\n      case PieceType.KNIGHT:\n        console.log(\"Knigh\");\n        break;\n      case PieceType.BISHOP:\n        console.log(\"Bishop\");\n        break;\n      case PieceType.ROOK:\n        console.log(\"Rook\");\n        break;\n      case PieceType.QUEEN:\n        console.log(\"Queen\");\n        break;\n      case PieceType.KING:\n        console.log(\"King\");\n        break;\n    }\n    if (type === PieceType.PAWN) {\n      const specialRow = team === TeamType.OUR ? 1 : 6;\n      const pawnDirection = team === TeamType.OUR ? 1 : -1;\n\n      // forward movement\n      if (initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 * pawnDirection) {\n        return !this.tileIsOccupied(desiredPosition, boardState) && !this.tileIsOccupied({\n          x: desiredPosition.x,\n          y: desiredPosition.y - pawnDirection\n        }, boardState);\n      } else if (initialPosition.x === desiredPosition.x && desiredPosition.y - initialPosition.y === pawnDirection) {\n        return !this.tileIsOccupied(desiredPosition, boardState);\n      }\n\n      // taking a piece\n      else if (desiredPosition.x - initialPosition.x === -1 && desiredPosition.y - initialPosition.y === pawnDirection) {\n        // attack in upper or bottom left corner\n        if (this.tileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\n          return true;\n        }\n      } else if (desiredPosition.x - initialPosition.x === 1 && desiredPosition.y - initialPosition.y === pawnDirection) {\n        // attack in upper or bottom right corner\n        if (this.tileIsOccupiedByOpponent(desiredPosition, boardState, team)) {\n          return true;\n        }\n      }\n    } else if (type === PieceType.KNIGHT) {\n      // KNIGHT MOVING LOGIC\n      // 8 Different moving patterns\n      for (let i = -1; i < 2; i += 2) {\n        for (let j = -1; j < 2; j += 2) {\n          if (desiredPosition.y - initialPosition.y === i * 2) {\n            if (desiredPosition.x - initialPosition.x === j) {\n              return this.tileIsEmptyOrOccupiedByOpponent(desiredPosition, boardState, team);\n            }\n          } else if (desiredPosition.x - initialPosition.x === i * 2) {\n            if (desiredPosition.y - initialPosition.y === j) {\n              return this.tileIsEmptyOrOccupiedByOpponent(desiredPosition, boardState, team);\n            }\n          }\n        }\n      }\n    } else if (type === PieceType.BISHOP) {\n      // BISHOP MOVING AND ATTACK LOGIC\n\n      for (let i = 1; i < 8; i++) {\n        // up right\n        if (desiredPosition.x > initialPosition.x && desiredPosition.y > initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x + i,\n            y: initialPosition.y + i\n          };\n          // check if tile is destination tile\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n\n        // bottom right\n        if (desiredPosition.x > initialPosition.x && desiredPosition.y < initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x + i,\n            y: initialPosition.y - i\n          };\n          // check if tile is destination tile\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n        // top left\n        if (desiredPosition.x < initialPosition.x && desiredPosition.y > initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x - i,\n            y: initialPosition.y + i\n          };\n          // check if tile is destination tile\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n\n        // bottom left\n        if (desiredPosition.x < initialPosition.x && desiredPosition.y < initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x - i,\n            y: initialPosition.y - i\n          };\n          // check if tile is destination tile\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n      }\n      return false;\n    } else if (type === PieceType.ROOK) {\n      // ROOK MOVING AND ATTACK LOGIC\n      if (initialPosition.x === desiredPosition.x) {\n        for (let i = 1; i < 8; i++) {\n          // Vertical Movement\n          let multiplier = desiredPosition.y < initialPosition.y ? -1 : 1;\n          let passedPosition = {\n            x: initialPosition.x,\n            y: initialPosition.y + i * multiplier\n          };\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          } else if (this.tileIsOccupied(passedPosition, boardState)) {\n            break;\n          }\n        }\n      }\n      // Horizontal\n      if (initialPosition.y === desiredPosition.y) {\n        for (let i = 1; i < 8; i++) {\n          let multiplier = desiredPosition.x < initialPosition.x ? -1 : 1;\n          let passedPosition = {\n            x: initialPosition.x + i * multiplier,\n            y: initialPosition.y\n          };\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          } else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n      }\n      return false;\n    } else if (type === PieceType.QUEEN) {\n      // Queen MOVING AND ATTACK LOGIC\n\n      for (let i = 1; i < 8; i++) {\n        // up right\n        if (desiredPosition.x > initialPosition.x && desiredPosition.y > initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x + i,\n            y: initialPosition.y + i\n          };\n          // check if tile is destination tile\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n\n        // bottom right\n        if (desiredPosition.x > initialPosition.x && desiredPosition.y < initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x + i,\n            y: initialPosition.y - i\n          };\n          // check if tile is destination tile\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n\n        // top left\n        if (desiredPosition.x < initialPosition.x && desiredPosition.y > initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x - i,\n            y: initialPosition.y + i\n          };\n          // check if tile is destination tile\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n\n        // bottom left\n        if (desiredPosition.x < initialPosition.x && desiredPosition.y < initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x - i,\n            y: initialPosition.y - i\n          };\n          // check if tile is destination tile\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n\n        // right\n        if (desiredPosition.x > initialPosition.x && desiredPosition.y === initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x + i,\n            y: initialPosition.y\n          };\n          // check if tile is destination tile\n          if (passedPosition.x === desiredPosition.x) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n\n        // forward\n        if (desiredPosition.x === initialPosition.x && desiredPosition.y > initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x,\n            y: initialPosition.y + i\n          };\n          // check if tile is destination tile\n          if (passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n        // left\n        if (desiredPosition.x < initialPosition.x && desiredPosition.y === initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x - i,\n            y: initialPosition.y\n          };\n          // check if tile is destination tile\n          if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n\n        // backwards\n        if (desiredPosition.x === initialPosition.x && desiredPosition.y < initialPosition.y) {\n          let passedPosition = {\n            x: initialPosition.x,\n            y: initialPosition.y - i\n          };\n          // check if tile is destination tile\n          if (passedPosition.y === desiredPosition.y) {\n            return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n          }\n          // passing tile\n          else {\n            if (this.tileIsOccupied(passedPosition, boardState)) {\n              break;\n            }\n          }\n        }\n      }\n      return false;\n    } else if (type === PieceType.KING) {\n      // Move 1 in any direction then if the rook is still in the position and the path is clear allow castling\n      // Also king cannot move into a check and cannot castle if it has moved and passes through a check\n    }\n    return false;\n  }\n}","map":{"version":3,"names":["PieceType","TeamType","Referee","tileIsEmptyOrOccupiedByOpponent","position","boardState","team","tileIsOccupied","tileIsOccupiedByOpponent","piece","find","p","x","y","isEnPassantMove","initialPosition","desiredPosition","type","pawnDirection","OUR","PAWN","enPassant","isValidMove","console","log","KNIGHT","BISHOP","ROOK","QUEEN","KING","specialRow","i","j","passedPosition","multiplier"],"sources":["/Users/liamhackett/Desktop/Chess-App/src/referee/Referee.ts"],"sourcesContent":["import { PieceType, TeamType , Piece, Position} from \"../Constants\";\n\nexport default class Referee {\n    tileIsEmptyOrOccupiedByOpponent(position: Position, boardState: Piece[], team: TeamType): boolean{\n        return !this.tileIsOccupied(position, boardState) || this.tileIsOccupiedByOpponent(position, boardState, team);\n    }\n    tileIsOccupied(position: Position, boardState: Piece[]): boolean {\n        const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y);\n        if(piece){\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    tileIsOccupiedByOpponent(position: Position, boardState: Piece[], team: TeamType): boolean {\n        const piece = boardState.find(p => p.position.x === position.x && p.position.y === position.y && p.team !== team);\n        if (piece) {\n            return true;\n        }\n        else{\n            return false;\n        }\n    }\n\n    isEnPassantMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]){\n        const pawnDirection = (team === TeamType.OUR) ? 1: -1;\n       \n        // upper left or upper right || bottom left or bottom right\n        // if a piece is under or above the attacked tile\n\n        if (type == PieceType.PAWN){\n            if ((desiredPosition.x - initialPosition.x === -1 || desiredPosition.x - initialPosition.x === 1)&& desiredPosition.y - initialPosition.y === pawnDirection){\n                const piece = boardState.find(p => p.position.x === desiredPosition.x && p.position.y === desiredPosition.y - pawnDirection && p.enPassant);\n                if(piece){\n                    return true;\n                }\n            }\n            \n        }\n       \n       return false;\n    }\n\n    isValidMove(initialPosition: Position, desiredPosition: Position, type: PieceType, team: TeamType, boardState: Piece[]) {\n\n        // pawn movement \n\n        switch(type) {\n            case PieceType.PAWN:\n                console.log(\"Pawn\");\n                break;\n            case PieceType.KNIGHT:\n                console.log(\"Knigh\");\n                break;\n            case PieceType.BISHOP:\n                console.log(\"Bishop\");\n                break;\n            case PieceType.ROOK:\n                console.log(\"Rook\");\n                break;\n            case PieceType.QUEEN:\n                console.log(\"Queen\");\n                break;\n            case PieceType.KING:\n                console.log(\"King\");\n                break;\n        }\n        if (type === PieceType.PAWN){\n            const specialRow = (team === TeamType.OUR) ? 1: 6;\n            const pawnDirection = (team === TeamType.OUR) ? 1: -1;\n            \n            // forward movement\n            if(initialPosition.y === specialRow && desiredPosition.y - initialPosition.y === 2 *pawnDirection){\n                return !this.tileIsOccupied(desiredPosition, boardState) && !this.tileIsOccupied({x : desiredPosition.x, y: desiredPosition.y - pawnDirection}, boardState);\n            }\n            else if(initialPosition.x === desiredPosition.x && (desiredPosition.y - initialPosition.y === pawnDirection)){\n                    return !this.tileIsOccupied(desiredPosition, boardState);\n                        \n            }\n            \n            // taking a piece\n            else if (desiredPosition.x - initialPosition.x === -1 && desiredPosition.y - initialPosition.y === pawnDirection){\n                // attack in upper or bottom left corner\n                if(this.tileIsOccupiedByOpponent(desiredPosition, boardState, team)){\n                    return true;\n                }\n            }\n            else if (desiredPosition.x - initialPosition.x === 1 && desiredPosition.y - initialPosition.y === pawnDirection){\n                // attack in upper or bottom right corner\n                if(this.tileIsOccupiedByOpponent(desiredPosition, boardState, team)){\n                    return true;\n                }\n            }\n        }\n        else if (type === PieceType.KNIGHT){\n            // KNIGHT MOVING LOGIC\n            // 8 Different moving patterns\n            for(let i = -1; i < 2; i+=2){\n                for(let j = -1; j < 2; j+=2){\n                    if (desiredPosition.y - initialPosition.y === i * 2){\n                        if (desiredPosition.x - initialPosition.x === j){\n                            return this.tileIsEmptyOrOccupiedByOpponent(desiredPosition, boardState, team);\n                            \n                        }\n                    }\n                    else if (desiredPosition.x - initialPosition.x === i * 2){\n                        if(desiredPosition.y - initialPosition.y === j){\n                            return this.tileIsEmptyOrOccupiedByOpponent(desiredPosition, boardState, team);\n                        }\n                    }\n                }\n            }\n        }\n        else if (type === PieceType.BISHOP){\n            // BISHOP MOVING AND ATTACK LOGIC\n        \n            for (let i = 1; i < 8; i++){\n\n                // up right\n                if(desiredPosition.x > initialPosition.x && desiredPosition.y > initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x + i, y: initialPosition.y + i};\n                    // check if tile is destination tile\n                    if(passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                    \n                }\n               \n\n                // bottom right\n                if(desiredPosition.x > initialPosition.x && desiredPosition.y < initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x + i, y: initialPosition.y - i};\n                    // check if tile is destination tile\n                    if(passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                }\n                // top left\n                if(desiredPosition.x < initialPosition.x && desiredPosition.y > initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x - i, y: initialPosition.y + i};\n                    // check if tile is destination tile\n                    if(passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                }\n\n                // bottom left\n                if(desiredPosition.x < initialPosition.x && desiredPosition.y < initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x - i, y: initialPosition.y - i};\n                    // check if tile is destination tile\n                    if(passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return false;\n            \n        }\n\n        else if (type === PieceType.ROOK){\n            // ROOK MOVING AND ATTACK LOGIC\n            if(initialPosition.x === desiredPosition.x){\n                for (let i = 1; i < 8; i++){\n\n                    // Vertical Movement\n                    let multiplier = (desiredPosition.y < initialPosition.y) ? -1 : 1;\n\n                    let passedPosition: Position = {x: initialPosition.x, y: initialPosition.y + (i * multiplier)};\n\n                    if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    else if (this.tileIsOccupied(passedPosition, boardState)){\n                        break;\n                    }\n\n                }\n            }\n            // Horizontal\n            if(initialPosition.y === desiredPosition.y){\n                for (let i = 1; i < 8; i++){\n                    let multiplier = (desiredPosition.x < initialPosition.x) ? -1 : 1;\n\n                    let passedPosition: Position = {x: initialPosition.x + (i * multiplier), y: initialPosition.y};\n                    if (passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y) {\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    else {\n                        if (this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n\n                }\n            }\n                \n            \n            return false;\n        }\n\n        else if(type === PieceType.QUEEN) {\n            // Queen MOVING AND ATTACK LOGIC\n        \n            for (let i = 1; i < 8; i++){\n\n                // up right\n                if(desiredPosition.x > initialPosition.x && desiredPosition.y > initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x + i, y: initialPosition.y + i};\n                    // check if tile is destination tile\n                    if(passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                    \n                }\n               \n                // bottom right\n                if(desiredPosition.x > initialPosition.x && desiredPosition.y < initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x + i, y: initialPosition.y - i};\n                    // check if tile is destination tile\n                    if(passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                }\n\n                // top left\n                if(desiredPosition.x < initialPosition.x && desiredPosition.y > initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x - i, y: initialPosition.y + i};\n                    // check if tile is destination tile\n                    if(passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                }\n\n                // bottom left\n                if(desiredPosition.x < initialPosition.x && desiredPosition.y < initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x - i, y: initialPosition.y - i};\n                    // check if tile is destination tile\n                    if(passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                }\n            \n                // right\n                if(desiredPosition.x > initialPosition.x && desiredPosition.y === initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x + i, y: initialPosition.y};\n                    // check if tile is destination tile\n                    if(passedPosition.x === desiredPosition.x){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                }\n            \n                // forward\n                if(desiredPosition.x === initialPosition.x && desiredPosition.y > initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x, y: initialPosition.y + i};\n                    // check if tile is destination tile\n                    if(passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                }\n                // left\n                if(desiredPosition.x < initialPosition.x && desiredPosition.y === initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x - i, y: initialPosition.y};\n                    // check if tile is destination tile\n                    if(passedPosition.x === desiredPosition.x && passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                }\n\n                // backwards\n                if(desiredPosition.x === initialPosition.x && desiredPosition.y < initialPosition.y) {\n                    let passedPosition: Position = {x: initialPosition.x, y: initialPosition.y - i};\n                    // check if tile is destination tile\n                    if(passedPosition.y === desiredPosition.y){\n                        return this.tileIsEmptyOrOccupiedByOpponent(passedPosition, boardState, team);\n                    }\n                    // passing tile\n                    else{\n                        if(this.tileIsOccupied(passedPosition, boardState)){\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return false;\n        }\n        else if(type === PieceType.KING){\n            // Move 1 in any direction then if the rook is still in the position and the path is clear allow castling\n            // Also king cannot move into a check and cannot castle if it has moved and passes through a check\n        }\n\n\n        return false;\n    }\n}"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAyB,cAAc;AAEnE,eAAe,MAAMC,OAAO,CAAC;EACzBC,+BAA+BA,CAACC,QAAkB,EAAEC,UAAmB,EAAEC,IAAc,EAAU;IAC7F,OAAO,CAAC,IAAI,CAACC,cAAc,CAACH,QAAQ,EAAEC,UAAU,CAAC,IAAI,IAAI,CAACG,wBAAwB,CAACJ,QAAQ,EAAEC,UAAU,EAAEC,IAAI,CAAC;EAClH;EACAC,cAAcA,CAACH,QAAkB,EAAEC,UAAmB,EAAW;IAC7D,MAAMI,KAAK,GAAGJ,UAAU,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,QAAQ,CAACQ,CAAC,KAAKR,QAAQ,CAACQ,CAAC,IAAID,CAAC,CAACP,QAAQ,CAACS,CAAC,KAAKT,QAAQ,CAACS,CAAC,CAAC;IAC9F,IAAGJ,KAAK,EAAC;MACL,OAAO,IAAI;IACf,CAAC,MACI;MACD,OAAO,KAAK;IAChB;EACJ;EAEAD,wBAAwBA,CAACJ,QAAkB,EAAEC,UAAmB,EAAEC,IAAc,EAAW;IACvF,MAAMG,KAAK,GAAGJ,UAAU,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,QAAQ,CAACQ,CAAC,KAAKR,QAAQ,CAACQ,CAAC,IAAID,CAAC,CAACP,QAAQ,CAACS,CAAC,KAAKT,QAAQ,CAACS,CAAC,IAAIF,CAAC,CAACL,IAAI,KAAKA,IAAI,CAAC;IACjH,IAAIG,KAAK,EAAE;MACP,OAAO,IAAI;IACf,CAAC,MACG;MACA,OAAO,KAAK;IAChB;EACJ;EAEAK,eAAeA,CAACC,eAAyB,EAAEC,eAAyB,EAAEC,IAAe,EAAEX,IAAc,EAAED,UAAmB,EAAC;IACvH,MAAMa,aAAa,GAAIZ,IAAI,KAAKL,QAAQ,CAACkB,GAAG,GAAI,CAAC,GAAE,CAAC,CAAC;;IAErD;IACA;;IAEA,IAAIF,IAAI,IAAIjB,SAAS,CAACoB,IAAI,EAAC;MACvB,IAAI,CAACJ,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,KAAK,CAAC,CAAC,IAAII,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,KAAK,CAAC,KAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,KAAKK,aAAa,EAAC;QACxJ,MAAMT,KAAK,GAAGJ,UAAU,CAACK,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,QAAQ,CAACQ,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAID,CAAC,CAACP,QAAQ,CAACS,CAAC,KAAKG,eAAe,CAACH,CAAC,GAAGK,aAAa,IAAIP,CAAC,CAACU,SAAS,CAAC;QAC3I,IAAGZ,KAAK,EAAC;UACL,OAAO,IAAI;QACf;MACJ;IAEJ;IAED,OAAO,KAAK;EACf;EAEAa,WAAWA,CAACP,eAAyB,EAAEC,eAAyB,EAAEC,IAAe,EAAEX,IAAc,EAAED,UAAmB,EAAE;IAEpH;;IAEA,QAAOY,IAAI;MACP,KAAKjB,SAAS,CAACoB,IAAI;QACfG,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QACnB;MACJ,KAAKxB,SAAS,CAACyB,MAAM;QACjBF,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;QACpB;MACJ,KAAKxB,SAAS,CAAC0B,MAAM;QACjBH,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;QACrB;MACJ,KAAKxB,SAAS,CAAC2B,IAAI;QACfJ,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QACnB;MACJ,KAAKxB,SAAS,CAAC4B,KAAK;QAChBL,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;QACpB;MACJ,KAAKxB,SAAS,CAAC6B,IAAI;QACfN,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;QACnB;IACR;IACA,IAAIP,IAAI,KAAKjB,SAAS,CAACoB,IAAI,EAAC;MACxB,MAAMU,UAAU,GAAIxB,IAAI,KAAKL,QAAQ,CAACkB,GAAG,GAAI,CAAC,GAAE,CAAC;MACjD,MAAMD,aAAa,GAAIZ,IAAI,KAAKL,QAAQ,CAACkB,GAAG,GAAI,CAAC,GAAE,CAAC,CAAC;;MAErD;MACA,IAAGJ,eAAe,CAACF,CAAC,KAAKiB,UAAU,IAAId,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,KAAK,CAAC,GAAEK,aAAa,EAAC;QAC9F,OAAO,CAAC,IAAI,CAACX,cAAc,CAACS,eAAe,EAAEX,UAAU,CAAC,IAAI,CAAC,IAAI,CAACE,cAAc,CAAC;UAACK,CAAC,EAAGI,eAAe,CAACJ,CAAC;UAAEC,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGK;QAAa,CAAC,EAAEb,UAAU,CAAC;MAC/J,CAAC,MACI,IAAGU,eAAe,CAACH,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAKI,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,KAAKK,aAAc,EAAC;QACrG,OAAO,CAAC,IAAI,CAACX,cAAc,CAACS,eAAe,EAAEX,UAAU,CAAC;MAEhE;;MAEA;MAAA,KACK,IAAIW,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,KAAK,CAAC,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,KAAKK,aAAa,EAAC;QAC7G;QACA,IAAG,IAAI,CAACV,wBAAwB,CAACQ,eAAe,EAAEX,UAAU,EAAEC,IAAI,CAAC,EAAC;UAChE,OAAO,IAAI;QACf;MACJ,CAAC,MACI,IAAIU,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,KAAK,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,KAAKK,aAAa,EAAC;QAC5G;QACA,IAAG,IAAI,CAACV,wBAAwB,CAACQ,eAAe,EAAEX,UAAU,EAAEC,IAAI,CAAC,EAAC;UAChE,OAAO,IAAI;QACf;MACJ;IACJ,CAAC,MACI,IAAIW,IAAI,KAAKjB,SAAS,CAACyB,MAAM,EAAC;MAC/B;MACA;MACA,KAAI,IAAIM,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAE,CAAC,EAAC;QACxB,KAAI,IAAIC,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAE,CAAC,EAAC;UACxB,IAAIhB,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,KAAKkB,CAAC,GAAG,CAAC,EAAC;YAChD,IAAIf,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,KAAKoB,CAAC,EAAC;cAC5C,OAAO,IAAI,CAAC7B,+BAA+B,CAACa,eAAe,EAAEX,UAAU,EAAEC,IAAI,CAAC;YAElF;UACJ,CAAC,MACI,IAAIU,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,KAAKmB,CAAC,GAAG,CAAC,EAAC;YACrD,IAAGf,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,KAAKmB,CAAC,EAAC;cAC3C,OAAO,IAAI,CAAC7B,+BAA+B,CAACa,eAAe,EAAEX,UAAU,EAAEC,IAAI,CAAC;YAClF;UACJ;QACJ;MACJ;IACJ,CAAC,MACI,IAAIW,IAAI,KAAKjB,SAAS,CAAC0B,MAAM,EAAC;MAC/B;;MAEA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAC;QAEvB;QACA,IAAGf,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,EAAE;UAC/E,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGmB,CAAC;YAAElB,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAGkB;UAAC,CAAC;UACnF;UACA,IAAGE,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YAChF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QAEJ;;QAGA;QACA,IAAGW,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,EAAE;UAC/E,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGmB,CAAC;YAAElB,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAGkB;UAAC,CAAC;UACnF;UACA,IAAGE,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YAChF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QACJ;QACA;QACA,IAAGW,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,EAAE;UAC/E,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGmB,CAAC;YAAElB,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAGkB;UAAC,CAAC;UACnF;UACA,IAAGE,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YAChF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QACJ;;QAEA;QACA,IAAGW,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,EAAE;UAC/E,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGmB,CAAC;YAAElB,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAGkB;UAAC,CAAC;UACnF;UACA,IAAGE,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YAChF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QACJ;MACJ;MAEA,OAAO,KAAK;IAEhB,CAAC,MAEI,IAAIY,IAAI,KAAKjB,SAAS,CAAC2B,IAAI,EAAC;MAC7B;MACA,IAAGZ,eAAe,CAACH,CAAC,KAAKI,eAAe,CAACJ,CAAC,EAAC;QACvC,KAAK,IAAImB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAC;UAEvB;UACA,IAAIG,UAAU,GAAIlB,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,GAAI,CAAC,CAAC,GAAG,CAAC;UAEjE,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC;YAAEC,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAIkB,CAAC,GAAGG;UAAW,CAAC;UAE9F,IAAID,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAE;YAClF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF,CAAC,MACI,IAAI,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;YACrD;UACJ;QAEJ;MACJ;MACA;MACA,IAAGU,eAAe,CAACF,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;QACvC,KAAK,IAAIkB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAC;UACvB,IAAIG,UAAU,GAAIlB,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,GAAI,CAAC,CAAC,GAAG,CAAC;UAEjE,IAAIqB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAImB,CAAC,GAAGG,UAAW;YAAErB,CAAC,EAAEE,eAAe,CAACF;UAAC,CAAC;UAC9F,IAAIoB,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAE;YAClF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF,CAAC,MACI;YACD,IAAI,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAChD;YACJ;UACJ;QAEJ;MACJ;MAGA,OAAO,KAAK;IAChB,CAAC,MAEI,IAAGY,IAAI,KAAKjB,SAAS,CAAC4B,KAAK,EAAE;MAC9B;;MAEA,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAC;QAEvB;QACA,IAAGf,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,EAAE;UAC/E,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGmB,CAAC;YAAElB,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAGkB;UAAC,CAAC;UACnF;UACA,IAAGE,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YAChF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QAEJ;;QAEA;QACA,IAAGW,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,EAAE;UAC/E,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGmB,CAAC;YAAElB,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAGkB;UAAC,CAAC;UACnF;UACA,IAAGE,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YAChF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QACJ;;QAEA;QACA,IAAGW,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,EAAE;UAC/E,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGmB,CAAC;YAAElB,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAGkB;UAAC,CAAC;UACnF;UACA,IAAGE,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YAChF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QACJ;;QAEA;QACA,IAAGW,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,EAAE;UAC/E,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGmB,CAAC;YAAElB,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAGkB;UAAC,CAAC;UACnF;UACA,IAAGE,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YAChF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QACJ;;QAEA;QACA,IAAGW,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,KAAKE,eAAe,CAACF,CAAC,EAAE;UACjF,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGmB,CAAC;YAAElB,CAAC,EAAEE,eAAe,CAACF;UAAC,CAAC;UAC/E;UACA,IAAGoB,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,EAAC;YACtC,OAAO,IAAI,CAACT,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QACJ;;QAEA;QACA,IAAGW,eAAe,CAACJ,CAAC,KAAKG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,EAAE;UACjF,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC;YAAEC,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAGkB;UAAC,CAAC;UAC/E;UACA,IAAGE,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YACtC,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QACJ;QACA;QACA,IAAGW,eAAe,CAACJ,CAAC,GAAGG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,KAAKE,eAAe,CAACF,CAAC,EAAE;UACjF,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC,GAAGmB,CAAC;YAAElB,CAAC,EAAEE,eAAe,CAACF;UAAC,CAAC;UAC/E;UACA,IAAGoB,cAAc,CAACrB,CAAC,KAAKI,eAAe,CAACJ,CAAC,IAAIqB,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YAChF,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QACJ;;QAEA;QACA,IAAGW,eAAe,CAACJ,CAAC,KAAKG,eAAe,CAACH,CAAC,IAAII,eAAe,CAACH,CAAC,GAAGE,eAAe,CAACF,CAAC,EAAE;UACjF,IAAIoB,cAAwB,GAAG;YAACrB,CAAC,EAAEG,eAAe,CAACH,CAAC;YAAEC,CAAC,EAAEE,eAAe,CAACF,CAAC,GAAGkB;UAAC,CAAC;UAC/E;UACA,IAAGE,cAAc,CAACpB,CAAC,KAAKG,eAAe,CAACH,CAAC,EAAC;YACtC,OAAO,IAAI,CAACV,+BAA+B,CAAC8B,cAAc,EAAE5B,UAAU,EAAEC,IAAI,CAAC;UACjF;UACA;UAAA,KACI;YACA,IAAG,IAAI,CAACC,cAAc,CAAC0B,cAAc,EAAE5B,UAAU,CAAC,EAAC;cAC/C;YACJ;UACJ;QACJ;MACJ;MAEA,OAAO,KAAK;IAChB,CAAC,MACI,IAAGY,IAAI,KAAKjB,SAAS,CAAC6B,IAAI,EAAC;MAC5B;MACA;IAAA;IAIJ,OAAO,KAAK;EAChB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}